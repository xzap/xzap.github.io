[{"categories":["documentation"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念.","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"探索 Hugo - LoveIt 主题的全部内容和背后的核心概念. ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:0:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"1 准备 由于 Hugo 提供的便利性, Hugo 本身是这个主题唯一的依赖. 直接安装满足你操作系统 (Windows, Linux, macOS) 的最新版本  Hugo (\u003e 0.62.0) . 为什么不支持早期版本的 Hugo? 由于 Markdown 渲染钩子函数 在 Hugo 圣诞节版本 中被引入, 本主题只支持高于 0.62.0 的 Hugo 版本. 推荐使用 Hugo extended 版本 由于这个主题的一些特性需要将  SCSS 转换为  CSS, 推荐使用 Hugo extended 版本来获得更好的使用体验. ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:1:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"2 安装 以下步骤可帮助你初始化新网站. 如果你根本不了解 Hugo, 我们强烈建议你按照此 快速入门文档 进一步了解它. ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:2:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.1 创建你的项目 Hugo 提供了一个 new 命令来创建一个新的网站: hugo new site my_website cd my_website ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:2:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.2 安装主题 LoveIt 主题的仓库是: https://github.com/dillonzq/LoveIt . 你可以下载主题的 最新版本  .zip 文件 并且解压放到 themes 目录. 另外, 也可以直接把这个主题克隆到 themes 目录: git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt 或者, 初始化你的项目目录为 git 仓库, 并且把主题仓库作为你的网站目录的子模块: git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:2:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.3 基础配置 以下是 LoveIt 主题的基本配置: baseURL = \"http://example.org/\" # [en, zh-cn, fr, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" # 是否包括中日韩文字 hasCJKLanguage = true # 网站标题 title = \"我的全新 Hugo 网站\" # 更改使用 Hugo 构建网站时使用的默认主题 theme = \"LoveIt\" [params] # LoveIt 主题版本 version = \"0.2.X\" [menu] [[menu.main]] identifier = \"posts\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" name = \"文章\" url = \"/posts/\" # 当你将鼠标悬停在此菜单链接上时, 将显示的标题 title = \"\" weight = 1 [[menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 # Hugo 解析文档的配置 [markup] # 语法高亮设置 (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false 是必要的设置 (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false 注意 在构建网站时, 你可以使用 --theme 选项设置主题. 但是, 我建议你修改配置文件 (config.toml) 将本主题设置为默认主题. ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:2:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.4 创建你的第一篇文章 以下是创建第一篇文章的方法: hugo new posts/first_post.md 通过添加一些示例内容并替换文件开头的标题, 你可以随意编辑文章. 注意 默认情况下, 所有文章和页面均作为草稿创建. 如果想要渲染这些页面, 请从元数据中删除属性 draft: true, 设置属性 draft: false 或者为 hugo 命令添加 -D/--buildDrafts 参数. ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:2:4","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.5 在本地启动网站 使用以下命令启动网站: hugo serve 去查看 http://localhost:1313. 基本配置下的预览 技巧 当你运行 hugo serve 时, 当文件内容更改时, 页面会随着更改自动刷新. 注意 由于本主题使用了 Hugo 中的 .Scratch 来实现一些特性, 非常建议你为 hugo server 命令添加 --disableFastRender 参数来实时预览你正在编辑的文章页面. hugo serve --disableFastRender ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:2:5","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"2.6 构建网站 当你准备好部署你的网站时, 运行以下命令: hugo 会生成一个 public 目录, 其中包含你网站的所有静态内容和资源. 现在可以将其部署在任何 Web 服务器上. 技巧 网站内容可以通过 Netlify 自动发布和托管 (了解有关通过 Netlify 进行 HUGO 自动化部署 的更多信息). 或者, 您可以使用 AWS Amplify , Github pages , Render 以及更多… ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:2:6","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"3 配置 ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:3:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.1 网站配置 除了 Hugo 全局配置 和 菜单配置 之外, LoveIt 主题还允许您在网站配置中定义以下参数 (这是一个示例 config.toml, 其内容为默认值). 请打开下面的代码块查看完整的示例配置 : [params] # LoveIt 主题版本 version = \"0.2.X\" # 网站描述 description = \"这是我的全新 Hugo 网站\" # 网站关键词 keywords = [\"Theme\", \"Hugo\"] # 网站默认主题样式 (\"light\", \"dark\", \"auto\") defaultTheme = \"auto\" # 公共 git 仓库路径，仅在 enableGitInfo 设为 true 时有效 gitRepo = \"\" # 哪种哈希函数用来 SRI, 为空时表示不使用 SRI # (\"sha256\", \"sha384\", \"sha512\", \"md5\") fingerprint = \"\" # 日期格式 dateFormat = \"2006-01-02\" # 网站图片, 用于 Open Graph 和 Twitter Cards images = [\"/logo.png\"] # 应用图标配置 [params.app] # 当添加到 iOS 主屏幕或者 Android 启动器时的标题, 覆盖默认标题 title = \"LoveIt\" # 是否隐藏网站图标资源链接 noFavicon = false # 更现代的 SVG 网站图标, 可替代旧的 .png 和 .ico 文件 svgFavicon = \"\" # Android 浏览器主题色 themeColor = \"#ffffff\" # Safari 图标颜色 iconColor = \"#5bbad5\" # Windows v8-10磁贴颜色 tileColor = \"#da532c\" # 搜索配置 [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" # 页面头部导航栏配置 [params.header] # 桌面端导航栏模式 (\"fixed\", \"normal\", \"auto\") desktopMode = \"fixed\" # 移动端导航栏模式 (\"fixed\", \"normal\", \"auto\") mobileMode = \"auto\" # 页面头部导航栏标题配置 [params.header.title] # LOGO 的 URL logo = \"\" # 标题名称 name = \"\" # 你可以在名称 (允许 HTML 格式) 之前添加其他信息, 例如图标 pre = \"\" # 你可以在名称 (允许 HTML 格式) 之后添加其他信息, 例如图标 post = \"\" # 是否为标题显示打字机动画 typeit = false # 页面底部信息配置 [params.footer] enable = true # 自定义内容 (支持 HTML 格式) custom = '' # 是否显示 Hugo 和主题信息 hugo = true # 是否显示版权信息 copyright = true # 是否显示作者 author = true # 网站创立年份 since = 2019 # ICP 备案信息，仅在中国使用 (支持 HTML 格式) icp = \"\" # 许可协议信息 (支持 HTML 格式) license = '\u003ca rel=\"license external nofollow noopener noreffer\" href=\"https://creativecommons.org/licenses/by-nc/4.0/\" target=\"_blank\"\u003eCC BY-NC 4.0\u003c/a\u003e' # Section (所有文章) 页面配置 [params.section] # section 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # List (目录或标签) 页面配置 [params.list] # list 页面每页显示文章数量 paginate = 20 # 日期格式 (月和日) dateFormat = \"01-02\" # RSS 文章数目 rss = 10 # 主页配置 [params.home] # RSS 文章数目 rss = 10 # 主页个人信息 [params.home.profile] enable = true # Gravatar 邮箱，用于优先在主页显示的头像 gravatarEmail = \"\" # 主页显示头像的 URL avatarURL = \"/images/avatar.png\" # 主页显示的网站标题 (支持 HTML 格式) title = \"\" # 主页显示的网站副标题 subtitle = \"这是我的全新 Hugo 网站\" # 是否为副标题显示打字机动画 typeit = true # 是否显示社交账号 social = true # 免责声明 (支持 HTML 格式) disclaimer = \"\" # 主页文章列表 [params.home.posts] enable = true # 主页每页显示文章数量 paginate = 6 # 被 params.page 中的 hiddenFromHomePage 替代 # 当你没有在文章前置参数中设置 \"hiddenFromHomePage\" 时的默认行为 defaultHiddenFromHomePage = false # 作者的社交信息设置 [params.social] GitHub = \"xxxx\" Linkedin = \"\" Twitter = \"xxxx\" Instagram = \"xxxx\" Facebook = \"xxxx\" Telegram = \"xxxx\" Medium = \"\" Gitlab = \"\" Youtubelegacy = \"\" Youtubecustom = \"\" Youtubechannel = \"\" Tumblr = \"\" Quora = \"\" Keybase = \"\" Pinterest = \"\" Reddit = \"\" Codepen = \"\" FreeCodeCamp = \"\" Bitbucket = \"\" Stackoverflow = \"\" Weibo = \"\" Odnoklassniki = \"\" VK = \"\" Flickr = \"\" Xing = \"\" Snapchat = \"\" Soundcloud = \"\" Spotify = \"\" Bandcamp = \"\" Paypal = \"\" Fivehundredpx = \"\" Mix = \"\" Goodreads = \"\" Lastfm = \"\" Foursquare = \"\" Hackernews = \"\" Kickstarter = \"\" Patreon = \"\" Steam = \"\" Twitch = \"\" Strava = \"\" Skype = \"\" Whatsapp = \"\" Zhihu = \"\" Douban = \"\" Angellist = \"\" Slidershare = \"\" Jsfiddle = \"\" Deviantart = \"\" Behance = \"\" Dribbble = \"\" Wordpress = \"\" Vine = \"\" Googlescholar = \"\" Researchgate = \"\" Mastodon = \"\" Thingiverse = \"\" Devto = \"\" Gitea = \"\" XMPP = \"\" Matrix = \"\" Bilibili = \"\" Email = \"xxxx@xxxx.com\" RSS = true # # 文章页面配置 [params.page] # 是否在主页隐藏一篇文章 hiddenFromHomePage = false # 是否在搜索结果中隐藏一篇文章 hiddenFromSearch = false # 是否使用 twemoji twemoji = false # 是否使用 lightgallery lightgallery = false # 是否使用 ruby 扩展语法 ruby = true # 是否使用 fraction 扩展语法 fraction = true # 是否使用 fontawesome 扩展语法 fontawesome = true # 是否在文章页面显示原始 Markdown 文档链接 linkToMarkdown = true # 是否在 RSS 中显示全文内容 rssFullText = ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:3:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.2 网站图标, 浏览器配置, 网站清单 强烈建议你把: apple-touch-icon.png (180x180) favicon-32x32.png (32x32) favicon-16x16.png (16x16) mstile-150x150.png (150x150) android-chrome-192x192.png (192x192) android-chrome-512x512.png (512x512) 放在 /static 目录. 利用 https://realfavicongenerator.net/ 可以很容易地生成这些文件. 可以自定义 browserconfig.xml 和 site.webmanifest 文件来设置 theme-color 和 background-color. ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:3:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"3.3 自定义样式 注意 Hugo extended 版本对于自定义样式是必需的. 通过定义自定义 .scss 样式文件, LoveIt 主题支持可配置的样式. 包含自定义 .scss 样式文件的目录相对于 你的项目根目录 的路径为 assets/css. 在 assets/css/_override.scss 中, 你可以覆盖 themes/LoveIt/assets/css/_variables.scss 中的变量以自定义样式. 这是一个例子: @import url('https://fonts.googleapis.com/css?family=Fira+Mono:400,700\u0026display=swap\u0026subset=latin-ext'); $code-font-family: Fira Mono, Source Code Pro, Menlo, Consolas, Monaco, monospace; 在 assets/css/_custom.scss 中, 你可以添加一些 CSS 样式代码以自定义样式. ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:3:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"4 多语言和 i18n LoveIt 主题完全兼容 Hugo 的多语言模式, 并且支持在网页上切换语言. 语言切换 ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:4:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.1 兼容性 语言 Hugo 代码 HTML lang 属性 主题文档 Lunr.js 支持 英语 en en 简体中文 zh-cn zh-CN 法语 fr fr 波兰语 pl pl 巴西葡萄牙语 pt-br pt-BR 意大利语 it it 西班牙语 es es 德语 de de 塞尔维亚语 pl pl 俄语 ru ru 罗马尼亚语 ro ro 越南语 vi vi ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:4:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.2 基本配置 学习了 Hugo如何处理多语言网站 之后, 请在 站点配置 中定义你的网站语言. 例如, 一个支持英语, 中文和法语的网站配置: # [en, zh-cn, fr, pl, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" [languages] [languages.en] weight = 1 title = \"My New Hugo Site\" languageCode = \"en\" languageName = \"English\" [[languages.en.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Posts\" url = \"/posts/\" title = \"\" weight = 1 [[languages.en.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Tags\" url = \"/tags/\" title = \"\" weight = 2 [[languages.en.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Categories\" url = \"/categories/\" title = \"\" weight = 3 [languages.zh-cn] weight = 2 title = \"我的全新 Hugo 网站\" # 网站语言, 仅在这里 CN 大写 languageCode = \"zh-CN\" languageName = \"简体中文\" # 是否包括中日韩文字 hasCJKLanguage = true [[languages.zh-cn.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"文章\" url = \"/posts/\" title = \"\" weight = 1 [[languages.zh-cn.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"标签\" url = \"/tags/\" title = \"\" weight = 2 [[languages.zh-cn.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"分类\" url = \"/categories/\" title = \"\" weight = 3 [languages.fr] weight = 3 title = \"Mon nouveau site Hugo\" languageCode = \"fr\" languageName = \"Français\" [[languages.fr.menu.main]] identifier = \"posts\" pre = \"\" post = \"\" name = \"Postes\" url = \"/posts/\" title = \"\" weight = 1 [[languages.fr.menu.main]] identifier = \"tags\" pre = \"\" post = \"\" name = \"Balises\" url = \"/tags/\" title = \"\" weight = 2 [[languages.fr.menu.main]] identifier = \"categories\" pre = \"\" post = \"\" name = \"Catégories\" url = \"/categories/\" title = \"\" weight = 3 然后, 对于每个新页面, 将语言代码附加到文件名中. 单个文件 my-page.md 需要分为三个文件: 英语: my-page.en.md 中文: my-page.zh-cn.md 法语: my-page.fr.md 注意 请注意, 菜单中仅显示翻译的页面. 它不会替换为默认语言内容. 技巧 也可以使用 文章前置参数 来翻译网址. ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:4:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"4.3 修改默认的翻译字符串 翻译字符串用于在主题中使用的常见默认值. 目前提供一些语言 的翻译, 但你可能自定义其他语言或覆盖默认值. 要覆盖默认值, 请在你项目的 i18n 目录 i18n/\u003clanguageCode\u003e.toml 中创建一个新文件，并从 themes/LoveIt/i18n/en.toml 中获得提示. 另外, 由于你的翻译可能会帮助到其他人, 请花点时间通过  创建一个 PR 来贡献主题翻译, 谢谢! ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:4:3","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"5 搜索 基于 Lunr.js 或 algolia , LoveIt 主题支持搜索功能. ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:5:0","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.1 输出配置 为了生成搜索功能所需要的 index.json, 请在你的 网站配置 中添加 JSON 输出文件类型到 outputs 部分的 home 字段中. [outputs] home = [\"HTML\", \"RSS\", \"JSON\"] ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:5:1","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"5.2 搜索配置 基于 Hugo 生成的 index.json 文件, 你可以激活搜索功能. 这是你的 网站配置 中的搜索部分: [params.search] enable = true # 搜索引擎的类型 (\"lunr\", \"algolia\") type = \"lunr\" # 文章内容最长索引长度 contentLength = 4000 # 搜索框的占位提示语 placeholder = \"\" # 最大结果数目 maxResultLength = 10 # 结果内容片段长度 snippetLength = 50 # 搜索结果中高亮部分的 HTML 标签 highlightTag = \"em\" # 是否在搜索索引中使用基于 baseURL 的绝对路径 absoluteURL = false [params.search.algolia] index = \"\" appID = \"\" searchKey = \"\" 怎样选择搜索引擎? 以下是两种搜索引擎的对比: lunr: 简单, 无需同步 index.json, 没有 contentLength 的限制, 但占用带宽大且性能低 (特别是中文需要一个较大的分词依赖库) algolia: 高性能并且占用带宽低, 但需要同步 index.json 且有 contentLength 的限制 文章内容被 h2 和 h3 HTML 标签切分来提高查询效果并且基本实现全文搜索. contentLength 用来限制 h2 和 h3 HTML 标签开头的内容部分的最大长度. 关于 algolia 的使用技巧 你需要上传 index.json 到 algolia 来激活搜索功能. 你可以使用浏览器来上传 index.json 文件但是一个自动化的脚本可能效果更好. Algolia Atomic 是一个不错的选择. 为了兼容 Hugo 的多语言模式, 你需要上传不同语言的 index.json 文件到对应的 algolia index, 例如 zh-cn/index.json 或 fr/index.json… ","date":"2020-03-06","objectID":"/docs/theme-documentation/theme-documentation-basics/:5:2","tags":["installation","configuration"],"title":"主题文档 - 基本概念","uri":"/docs/theme-documentation/theme-documentation-basics/"},{"categories":["documentation"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容.","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"了解如何在 LoveIt 主题中快速, 直观地创建和组织内容. ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:0:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"1 内容组织 以下是一些方便你清晰管理和生成文章的目录结构建议: 保持博客文章存放在 content/posts 目录, 例如: content/posts/我的第一篇文章.md 保持简单的静态页面存放在 content 目录, 例如: content/about.md 本地资源组织 本地资源引用 有三种方法来引用图片和音乐等本地资源: 使用页面包 中的页面资源 . 你可以使用适用于 Resources.GetMatch 的值或者直接使用相对于当前页面目录的文件路径来引用页面资源. 将本地资源放在 assets 目录中, 默认路径是 /assets. 引用资源的文件路径是相对于 assets 目录的. 将本地资源放在 static 目录中, 默认路径是 /static. 引用资源的文件路径是相对于 static 目录的. 引用的优先级符合以上的顺序. 在这个主题中的很多地方可以使用上面的本地资源引用, 例如 链接, 图片, image shortcode, music shortcode 和前置参数中的部分参数. 页面资源或者 assets 目录中的图片处理 会在未来的版本中得到支持. 非常酷的功能! ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:1:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"2 前置参数 Hugo 允许你在文章内容前面添加 yaml, toml 或者 json 格式的前置参数. 注意 不是所有的以下前置参数都必须在你的每篇文章中设置. 只有在文章的参数和你的 网站设置 中的 page 部分不一致时才有必要这么做. 这是一个前置参数例子: --- title: \"我的第一篇文章\" subtitle: \"\" date: 2020-03-04T15:58:26+08:00 lastmod: 2020-03-04T15:58:26+08:00 draft: true author: \"\" authorLink: \"\" description: \"\" license: \"\" images: [] tags: [] categories: [] featuredImage: \"\" featuredImagePreview: \"\" hiddenFromHomePage: false hiddenFromSearch: false twemoji: false lightgallery: true ruby: true fraction: true fontawesome: true linkToMarkdown: true rssFullText: false toc: enable: true auto: true code: copy: true # ... math: enable: true # ... mapbox: accessToken: \"\" # ... share: enable: true # ... comment: enable: true # ... library: css: # someCSS = \"some.css\" # 位于 \"assets/\" # 或者 # someCSS = \"https://cdn.example.com/some.css\" js: # someJS = \"some.js\" # 位于 \"assets/\" # 或者 # someJS = \"https://cdn.example.com/some.js\" seo: images: [] # ... --- title: 文章标题. subtitle: 文章副标题. date: 这篇文章创建的日期时间. 它通常是从文章的前置参数中的 date 字段获取的, 但是也可以在 网站配置 中设置. lastmod: 上次修改内容的日期时间. draft: 如果设为 true, 除非 hugo 命令使用了 --buildDrafts/-D 参数, 这篇文章不会被渲染. author: 文章作者. authorLink: 文章作者的链接. description: 文章内容的描述. license: 这篇文章特殊的许可. images: 页面图片, 用于 Open Graph 和 Twitter Cards. tags: 文章的标签. categories: 文章所属的类别. featuredImage: 文章的特色图片. featuredImagePreview: 用在主页预览的文章特色图片. hiddenFromHomePage: 如果设为 true, 这篇文章将不会显示在主页上. hiddenFromSearch: 如果设为 true, 这篇文章将不会显示在搜索结果中. twemoji: 如果设为 true, 这篇文章会使用 twemoji. lightgallery: 如果设为 true, 文章中的图片将可以按照画廊形式呈现. ruby: 如果设为 true, 这篇文章会使用 上标注释扩展语法 . fraction: 如果设为 true, 这篇文章会使用 分数扩展语法 . fontawesome: 如果设为 true, 这篇文章会使用 Font Awesome 扩展语法 . linkToMarkdown: 如果设为 true, 内容的页脚将显示指向原始 Markdown 文件的链接. rssFullText: 如果设为 true, 在 RSS 中将会显示全文内容. toc: 和 网站配置 中的 params.page.toc 部分相同. code: 和 网站配置 中的 params.page.code 部分相同. math: 和 网站配置 中的 params.page.math 部分相同. mapbox: 和 网站配置 中的 params.page.mapbox 部分相同. share: 和 网站配置 中的 params.page.share 部分相同. comment: 和 网站配置 中的 params.page.comment 部分相同. library: 和 网站配置 中的 params.page.library 部分相同. seo: 和 网站配置 中的 params.page.seo 部分相同. 技巧 featuredImage 和 featuredImagePreview 支持本地资源引用 的完整用法. 如果带有在前置参数中设置了 name: featured-image 或 name: featured-image-preview 属性的页面资源, 没有必要在设置 featuredImage 或 featuredImagePreview: resources: - name: featured-image src: featured-image.jpg - name: featured-image-preview src: featured-image-preview.jpg ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:2:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"3 内容摘要 LoveIt 主题使用内容摘要在主页中显示大致文章信息。Hugo 支持生成文章的摘要. 文章摘要预览 ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:3:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"自动摘要拆分 默认情况下, Hugo 自动将内容的前 70 个单词作为摘要. 你可以通过在 网站配置 中设置 summaryLength 来自定义摘要长度. 如果您要使用 CJK中文/日语/韩语 语言创建内容, 并且想使用 Hugo 的自动摘要拆分功能，请在 网站配置 中将 hasCJKLanguage 设置为 true. ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:3:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"手动摘要拆分 另外, 你也可以添加 \u003c!--more--\u003e 摘要分割符来拆分文章生成摘要. 摘要分隔符之前的内容将用作该文章的摘要. 注意 请小心输入\u003c!--more--\u003e ; 即全部为小写且没有空格. ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:3:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"前置参数摘要 你可能希望摘要不是文章开头的文字. 在这种情况下, 你可以在文章前置参数的 summary 变量中设置单独的摘要. ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:3:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"使用文章描述作为摘要 你可能希望将文章前置参数中的 description 变量的内容作为摘要. 你仍然需要在文章开头添加 \u003c!--more--\u003e 摘要分割符. 将摘要分隔符之前的内容保留为空. 然后 LoveIt 主题会将你的文章描述作为摘要. ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:3:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"摘要选择的优先级顺序 由于可以通过多种方式指定摘要, 因此了解顺序很有用. 如下: 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 但分隔符之前没有内容, 则使用描述作为摘要. 如果文章中有 \u003c!--more--\u003e 摘要分隔符, 则将按照手动摘要拆分的方法获得摘要. 如果文章前置参数中有摘要变量, 那么将以该值作为摘要. 按照自动摘要拆分方法. 注意 不建议在摘要内容中包含富文本块元素, 这会导致渲染错误. 例如代码块, 图片, 表格等. ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:3:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"4 Markdown 基本语法 这部分内容在 Markdown 基本语法页面 中介绍. ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:4:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"5 Markdown 扩展语法 LoveIt 主题提供了一些扩展的语法便于你撰写文章. ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:5:0","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"Emoji 支持 这部分内容在 Emoji 支持页面 中介绍. ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:5:1","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"数学公式 LoveIt 基于 $ \\KaTeX $ 提供数学公式的支持. 在你的 网站配置 中的 [params.math] 下面设置属性 enable = true, 并在文章的前置参数中设置属性 math: true来启用数学公式的自动渲染. 技巧 有一份 $ \\KaTeX $ 中支持的 $ \\TeX $ 函数 清单. 公式块 默认的公式块分割符是 $$/$$ 和 \\\\[/\\\\]: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\\\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\] 呈现的输出效果如下: $$ c = \\pm\\sqrt{a^2 + b^2} $$ \\[ f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\] 行内公式 默认的行内公式分割符是 $/$ 和 \\\\(/\\\\): $ c = \\pm\\sqrt{a^2 + b^2} $ 和 \\\\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\\\) 呈现的输出效果如下: $ c = \\pm\\sqrt{a^2 + b^2} $ 和 \\( f(x)=\\int_{-\\infty}^{\\infty} \\hat{f}(\\xi) e^{2 \\pi i \\xi x} d \\xi \\) 技巧 你可以在 网站配置 中自定义公式块和行内公式的分割符. Copy-tex Copy-tex 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 在选择并复制 $ \\KaTeX $ 渲染的公式时, 会将其 $ \\LaTeX $ 源代码复制到剪贴板. 在你的 网站配置 中的 [params.math] 下面设置属性 copyTex = true 来启用 Copy-tex. 选择并复制上一节中渲染的公式, 可以发现复制的内容为 LaTeX 源代码. mhchem mhchem 是一个 $ \\KaTeX $ 的插件. 通过这个扩展, 你可以在文章中轻松编写漂亮的化学方程式. 在你的 网站配置 中的 [params.math] 下面设置属性 mhchem = true 来启用 mhchem. $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ 呈现的输出效果如下: $$ \\ce{CO2 + C -\u003e 2 CO} $$ $$ \\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-} $$ ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:5:2","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"字符注音或者注释 LoveIt 主题支持一种 字符注音或者注释 Markdown 扩展语法: [Hugo]^(一个开源的静态网站生成工具) 呈现的输出效果如下: Hugo一个开源的静态网站生成工具 ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:5:3","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"分数 LoveIt 主题支持一种 分数 Markdown 扩展语法: [浅色]/[深色] [99]/[100] 呈现的输出效果如下: 浅色/深色 90/100 ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:5:4","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"Font Awesome LoveIt 主题使用 Font Awesome 作为图标库. 你同样可以在文章中轻松使用这些图标. 从 Font Awesome 网站 上获取所需的图标 class. 去露营啦! :(fas fa-campground fa-fw): 很快就回来. 真开心! :(far fa-grin-tears): 呈现的输出效果如下: 去露营啦!  很快就回来. 真开心! ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:5:5","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"转义字符 在某些特殊情况下 (编写这个主题文档时 ), 你的文章内容会与 Markdown 的基本或者扩展语法冲突, 并且无法避免. 转义字符语法可以帮助你渲染出想要的内容: {?X} -\u003e X 例如, 两个 : 会启用 emoji 语法. 但有时候这不是你想要的结果. 可以像这样使用转义字符语法: {?:}joy: 呈现的输出效果如下: :joy: 而不是 :joy: 技巧 这个方法可以间接解决一个还未解决的 Hugo 的 issue . 另一个例子是: [link{?]}(#escape-character) 呈现的输出效果如下: [link](#escape-character) 而不是 link . ","date":"2020-03-05","objectID":"/docs/theme-documentation/theme-documentation-content/:5:6","tags":["content","Markdown"],"title":"主题文档 - 内容","uri":"/docs/theme-documentation/theme-documentation-content/"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁.","date":"2020-03-04","objectID":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. Hugo 使用 Markdown 为其简单的内容格式. 但是, Markdown 在很多方面都无法很好地支持. 你可以使用纯 HTML 来扩展可能性. 但这恰好是一个坏主意. 大家使用 Markdown, 正是因为它即使不经过渲染也可以轻松阅读. 应该尽可能避免使用 HTML 以保持内容简洁. 为了避免这种限制, Hugo 创建了 shortcodes . shortcode 是一个简单代码段, 可以生成合理的 HTML 代码, 并且符合 Markdown 的设计哲学. Hugo 附带了一组预定义的 shortcodes, 它们实现了一些非常常见的用法. 提供这些 shortcodes 是为了方便保持你的 Markdown 内容简洁. ","date":"2020-03-04","objectID":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/:0:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"1 figure figure 的文档 一个 figure 示例: {{\u003c figure src=\"/images/lighthouse.jpg\" title=\"Lighthouse (figure)\" \u003e}} 输出的 HTML 看起来像这样: \u003cfigure\u003e \u003cimg src=\"/images/lighthouse.jpg\"/\u003e \u003cfigcaption\u003e \u003ch4\u003eLighthouse (figure)\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e ","date":"2020-03-04","objectID":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/:1:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"2 gist gist 的文档 一个 gist 示例: {{\u003c gist spf13 7896402 \u003e}} 呈现的输出效果如下: 输出的 HTML 看起来像这样: \u003cscript type=\"application/javascript\" src=\"https://gist.github.com/spf13/7896402.js\"\u003e\u003c/script\u003e ","date":"2020-03-04","objectID":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/:2:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"3 highlight highlight 的文档 一个 highlight 示例: {{\u003c highlight html \u003e}} \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e {{\u003c /highlight \u003e}} 呈现的输出效果如下: \u003csection id=\"main\"\u003e \u003cdiv\u003e \u003ch1 id=\"title\"\u003e{{ .Title }}\u003c/h1\u003e {{ range .Pages }} {{ .Render \"summary\"}} {{ end }} \u003c/div\u003e \u003c/section\u003e ","date":"2020-03-04","objectID":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/:3:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"4 instagram instagram 的文档 一个 instagram 示例: {{\u003c instagram BWNjjyYFxVx hidecaption \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/:4:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"5 param param 的文档 一个 param 示例: {{\u003c param description \u003e}} 呈现的输出效果如下: Hugo 提供了多个内置的 Shortcodes, 以方便作者保持 Markdown 内容的整洁. ","date":"2020-03-04","objectID":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/:5:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"6 ref 和 relref ref 和 relref 的文档 ","date":"2020-03-04","objectID":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/:6:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"7 tweet tweet 的文档 一个 tweet 示例: {{\u003c tweet 877500564405444608 \u003e}} ","date":"2020-03-04","objectID":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/:7:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"8 vimeo vimeo 的文档 一个 vimeo 示例: {{\u003c vimeo 146022717 \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/:8:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"9 youtube youtube 的文档 一个 youtube 示例: {{\u003c youtube w7Ft2ymGmfc \u003e}} 呈现的输出效果如下: ","date":"2020-03-04","objectID":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/:9:0","tags":["shortcodes"],"title":"主题文档 - 内置 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-built-in-shortcodes/"},{"categories":["documentation"],"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode.","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"LoveIt 主题在 Hugo 内置的 shortcode 的基础上提供多个扩展的 shortcode. ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:0:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"1 style 注意 Hugo extended 版本对于 style shortcode 是必需的. style shortcode 用来在你的文章中插入自定义样式. style shortcode 有两个位置参数. 第一个参数是自定义样式的内容. 它支持  SASS 中的嵌套语法, 并且 \u0026 指代这个父元素. 第二个参数是包裹你要更改样式的内容的 HTML 标签, 默认值是 div. 一个 style 示例: {{\u003c style \"text-align:right; strong{color:#00b1ff;}\" \u003e}} This is a **right-aligned** paragraph. {{\u003c /style \u003e}} 呈现的输出效果如下: This is a right-aligned paragraph. ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:1:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"2 link link shortcode 是 Markdown 链接语法 的替代. link shortcode 可以提供一些其它的功能并且可以在代码块中使用. 支持本地资源引用 的完整用法. link shortcode 有以下命名参数: href [必需] (第一个位置参数) 链接的目标. content [可选] (第二个位置参数) 链接的内容, 默认值是 href 参数的值. 支持 Markdown 或者 HTML 格式. title [可选] (第三个位置参数) HTML a 标签 的 title 属性, 当悬停在链接上会显示的提示. rel [可选] HTML a 标签 的 rel 补充属性. class [可选] HTML a 标签 的 class 属性. 一个 link 示例: {{\u003c link \"https://assemble.io\" \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" \u003e}} {{\u003c link \"mailto:contact@revolunet.com\" \u003e}} 或者 {{\u003c link href=\"mailto:contact@revolunet.com\" \u003e}} {{\u003c link \"https://assemble.io\" Assemble \u003e}} 或者 {{\u003c link href=\"https://assemble.io\" content=Assemble \u003e}} 呈现的输出效果如下: https://assemble.io mailto:contact@revolunet.com Assemble 一个带有标题的 link 示例: {{\u003c link \"https://github.com/upstage/\" Upstage \"Visit Upstage!\" \u003e}} 或者 {{\u003c link href=\"https://github.com/upstage/\" content=Upstage title=\"Visit Upstage!\" \u003e}} 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:2:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"3 image image shortcode 是 figure shortcode 的替代. image shortcode 可以充分利用 lazysizes 和 lightgallery.js 两个依赖库. 支持本地资源引用 的完整用法. image shortcode 有以下命名参数: src [必需] (第一个位置参数) 图片的 URL. alt [可选] (第二个位置参数) 图片无法显示时的替代文本, 默认值是 src 参数的值. 支持 Markdown 或者 HTML 格式. caption [可选] (第三个位置参数) 图片标题. 支持 Markdown 或者 HTML 格式. title [可选] 当悬停在图片上会显示的提示. class [可选] HTML figure 标签的 class 属性. src_s [可选] 图片缩略图的 URL, 用在画廊模式中, 默认值是 src 参数的值. src_l [可选] 高清图片的 URL, 用在画廊模式中, 默认值是 src 参数的值. height [可选] 图片的 height 属性. width [可选] 图片的 width 属性. linked [可选] 图片是否需要被链接, 默认值是 true. rel [可选] HTML a 标签 的 rel 补充属性, 仅在 linked 属性设置成 true 时有效. 一个 image 示例: {{\u003c image src=\"/images/lighthouse.jpg\" caption=\"Lighthouse (`image`)\" src_s=\"/images/lighthouse-small.jpg\" src_l=\"/images/lighthouse-large.jpg\" \u003e}} 呈现的输出效果如下: Lighthouse (image) ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:3:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"4 admonition admonition shortcode 支持 12 种 帮助你在页面中插入提示的横幅. 支持 Markdown 或者 HTML 格式. 注意 一个 注意 横幅 摘要 一个 摘要 横幅 信息 一个 信息 横幅 技巧 一个 技巧 横幅 成功 一个 成功 横幅 问题 一个 问题 横幅 警告 一个 警告 横幅 失败 一个 失败 横幅 危险 一个 危险 横幅 Bug 一个 Bug 横幅 示例 一个 示例 横幅 引用 一个 引用 横幅 admonition shortcode 有以下命名参数: type [必需] (第一个位置参数) admonition 横幅的类型, 默认值是 note. title [可选] (第二个位置参数) admonition 横幅的标题, 默认值是 type 参数的值. open [可选] (第三个位置参数) 横幅内容是否默认展开, 默认值是 true. 一个 admonition 示例: {{\u003c admonition type=tip title=\"This is a tip\" open=false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 或者 {{\u003c admonition tip \"This is a tip\" false \u003e}} 一个 **技巧** 横幅 {{\u003c /admonition \u003e}} 呈现的输出效果如下: This is a tip 一个 技巧 横幅 ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:4:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5 mermaid mermaid 是一个可以帮助你在文章中生成图表和流程图的库, 类似 Markdown 的语法. 只需将你的 mermaid 代码插入 mermaid shortcode 中即可. ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:5:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.1 流程图 一个 流程图 mermaid 示例: {{\u003c mermaid \u003e}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:5:1","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.2 时序图 一个 时序图 mermaid 示例: {{\u003c mermaid \u003e}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts \u003cbr/\u003eprevail... John--\u003eAlice: Great! John-\u003eBob: How about you? Bob--\u003eJohn: Jolly good! {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:5:2","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.3 甘特图 一个 甘特图 mermaid 示例: {{\u003c mermaid \u003e}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:5:3","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.4 类图 一个 类图 mermaid 示例: {{\u003c mermaid \u003e}} classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:5:4","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.5 状态图 一个 状态图 mermaid 示例: {{\u003c mermaid \u003e}} stateDiagram [*] --\u003e Still Still --\u003e [*] Still --\u003e Moving Moving --\u003e Still Moving --\u003e Crash Crash --\u003e [*] {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:5:5","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.6 Git 图 一个 Git 图 mermaid 示例: {{\u003c mermaid \u003e}} gitGraph: options { \"nodeSpacing\": 100, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:5:6","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"5.7 饼图 一个 饼图 mermaid 示例: {{\u003c mermaid \u003e}} pie \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 {{\u003c /mermaid \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:5:7","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"6 echarts ECharts 是一个帮助你生成交互式数据可视化的库. ECharts 提供了常规的 折线图 , 柱状图 , 散点图 , 饼图 , K线图 , 用于统计的 盒形图 , 用于地理数据可视化的 地图 , 热力图 , 线图 , 用于关系数据可视化的 关系图 , treemap , 旭日图 , 多维数据可视化的 平行坐标 , 还有用于 BI 的 漏斗图 , 仪表盘 , 并且支持图与图之间的混搭. 只需在 echarts shortcode 中以 JSON/YAML/TOML格式插入 ECharts 选项即可. 一个 JSON 格式的 echarts 示例: {{\u003c echarts \u003e}} { \"title\": { \"text\": \"折线统计图\", \"top\": \"2%\", \"left\": \"center\" }, \"tooltip\": { \"trigger\": \"axis\" }, \"legend\": { \"data\": [\"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\"], \"top\": \"10%\" }, \"grid\": { \"left\": \"5%\", \"right\": \"5%\", \"bottom\": \"5%\", \"top\": \"20%\", \"containLabel\": true }, \"toolbox\": { \"feature\": { \"saveAsImage\": { \"title\": \"保存为图片\" } } }, \"xAxis\": { \"type\": \"category\", \"boundaryGap\": false, \"data\": [\"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\"] }, \"yAxis\": { \"type\": \"value\" }, \"series\": [ { \"name\": \"邮件营销\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [120, 132, 101, 134, 90, 230, 210] }, { \"name\": \"联盟广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [220, 182, 191, 234, 290, 330, 310] }, { \"name\": \"视频广告\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [150, 232, 201, 154, 190, 330, 410] }, { \"name\": \"直接访问\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [320, 332, 301, 334, 390, 330, 320] }, { \"name\": \"搜索引擎\", \"type\": \"line\", \"stack\": \"总量\", \"data\": [820, 932, 901, 934, 1290, 1330, 1320] } ] } {{\u003c /echarts \u003e}} 一个 YAML 格式的 echarts 示例: {{\u003c echarts \u003e}} title: text: 折线统计图 top: 2% left: center tooltip: trigger: axis legend: data: - 邮件营销 - 联盟广告 - 视频广告 - 直接访问 - 搜索引擎 top: 10% grid: left: 5% right: 5% bottom: 5% top: 20% containLabel: true toolbox: feature: saveAsImage: title: 保存为图片 xAxis: type: category boundaryGap: false data: - 周一 - 周二 - 周三 - 周四 - 周五 - 周六 - 周日 yAxis: type: value series: - name: 邮件营销 type: line stack: 总量 data: - 120 - 132 - 101 - 134 - 90 - 230 - 210 - name: 联盟广告 type: line stack: 总量 data: - 220 - 182 - 191 - 234 - 290 - 330 - 310 - name: 视频广告 type: line stack: 总量 data: - 150 - 232 - 201 - 154 - 190 - 330 - 410 - name: 直接访问 type: line stack: 总量 data: - 320 - 332 - 301 - 334 - 390 - 330 - 320 - name: 搜索引擎 type: line stack: 总量 data: - 820 - 932 - 901 - 934 - 1290 - 1330 - 1320 {{\u003c /echarts \u003e}} 一个 TOML 格式的 echarts 示例: {{\u003c echarts \u003e}} [title] text = \"折线统计图\" top = \"2%\" left = \"center\" [tooltip] trigger = \"axis\" [legend] data = [ \"邮件营销\", \"联盟广告\", \"视频广告\", \"直接访问\", \"搜索引擎\" ] top = \"10%\" [grid] left = \"5%\" right = \"5%\" bottom = \"5%\" top = \"20%\" containLabel = true [toolbox] [toolbox.feature] [toolbox.feature.saveAsImage] title = \"保存为图片\" [xAxis] type = \"category\" boundaryGap = false data = [ \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\" ] [yAxis] type = \"value\" [[series]] name = \"邮件营销\" type = \"line\" stack = \"总量\" data = [ 120.0, 132.0, 101.0, 134.0, 90.0, 230.0, 210.0 ] [[series]] name = \"联盟广告\" type = \"line\" stack = \"总量\" data = [ 220.0, 182.0, 191.0, 234.0, 290.0, 330.0, 310.0 ] [[series]] name = \"视频广告\" type = \"line\" stack = \"总量\" data = [ 150.0, 232.0, 201.0, 154.0, 190.0, 330.0, 410.0 ] [[series]] name = \"直接访问\" type = \"line\" stack = \"总量\" data = [ 320.0, 332.0, 301.0, 334.0, 390.0, 330.0, 320.0 ] [[series]] name = \"搜索引擎\" type = \"line\" stack = \"总量\" data = [ 820.0, 932.0, 901.0, 934.0, 1290.0, 1330.0, 1320.0 ] {{\u003c /echarts \u003e}} 呈现的输出效果如下: echarts shortcode 还有以下命名参数: width [可选] (第一个位置参数) 数据可视化的宽度, 默认值是 100%. height [可选] (第二个位置参数) 数据可视化的高度, 默认值是 30rem. ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:6:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"7 mapbox Mapbox GL JS 是一个 JavaScript 库，它使用 WebGL, 以 vector tiles 和 Mapbox styles 为来源, 将它们渲染成互动式地图. mapbox shortcode 有以下命名参数来使用 Mapbox GL JS: lng [必需] (第一个位置参数) 地图初始中心点的经度, 以度为单位. lat [必需] (第二个位置参数) 地图初始中心点的纬度, 以度为单位. zoom [可选] (第三个位置参数) 地图的初始缩放级别, 默认值是 10. marked [可选] (第四个位置参数) 是否在地图的初始中心点添加图钉, 默认值是 true. light-style [可选] (第五个位置参数) 浅色主题的地图样式, 默认值是前置参数 或者网站配置 中设置的值. dark-style [可选] (第六个位置参数) 深色主题的地图样式, 默认值是前置参数 或者网站配置 中设置的值. navigation [可选] 是否添加 NavigationControl , 默认值是前置参数 或者网站配置 中设置的值. geolocate [可选] 是否添加 GeolocateControl , 默认值是前置参数 或者网站配置 中设置的值. scale [可选] 是否添加 ScaleControl , 默认值是前置参数 或者网站配置 中设置的值. fullscreen [可选] 是否添加 FullscreenControl , 默认值是前置参数 或者网站配置 中设置的值. width [可选] 地图的宽度, 默认值是 100%. height [可选] 地图的高度, 默认值是 20rem. 一个简单的 mapbox 示例: {{\u003c mapbox 121.485 31.233 12 \u003e}} 或者 {{\u003c mapbox lng=121.485 lat=31.233 zoom=12 \u003e}} 呈现的输出效果如下: 一个带有自定义样式的 mapbox 示例: {{\u003c mapbox -122.252 37.453 10 false \"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 或者 {{\u003c mapbox lng=-122.252 lat=37.453 zoom=10 marked=false light-style=\"mapbox://styles/mapbox/streets-zh-v1\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:7:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8 music music shortcode 基于 APlayer 和 MetingJS 提供了一个内嵌的响应式音乐播放器. 有三种方式使用 music shortcode. ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:8:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.1 自定义音乐 URL 支持本地资源引用 的完整用法. music shortcode 有以下命名参数来使用自定义音乐 URL: server [必需] 音乐的链接. type [可选] 音乐的名称. artist [可选] 音乐的创作者. cover [可选] 音乐的封面链接. 一个使用自定义音乐 URL 的 music 示例: {{\u003c music url=\"/music/Wavelength.mp3\" name=Wavelength artist=oldmanyoung cover=\"/images/Wavelength.jpg\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:8:1","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.2 音乐平台 URL 的自动识别 music shortcode 有一个命名参数来使用音乐平台 URL 的自动识别: auto [必需]] (第一个位置参数) 用来自动识别的音乐平台 URL, 支持 netease, tencent 和 xiami 平台. 一个使用音乐平台 URL 的自动识别的 music 示例: {{\u003c music auto=\"https://music.163.com/#/playlist?id=60198\" \u003e}} 或者 {{\u003c music \"https://music.163.com/#/playlist?id=60198\" \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:8:2","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.3 自定义音乐平台, 类型和 ID music shortcode 有以下命名参数来使用自定义音乐平台: server [必需] (第一个位置参数) [netease, tencent, kugou, xiami, baidu] 音乐平台. type [必需] (第二个位置参数) [song, playlist, album, search, artist] 音乐类型. id [必需] (第三个位置参数) 歌曲 ID, 或者播放列表 ID, 或者专辑 ID, 或者搜索关键词, 或者创作者 ID. 一个使用自定义音乐平台的 music 示例: {{\u003c music server=\"netease\" type=\"song\" id=\"1868553\" \u003e}} 或者 {{\u003c music netease song 1868553 \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:8:3","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"8.4 其它参数 music shortcode 有一些可以应用于以上三种方式的其它命名参数: theme [可选] 音乐播放器的主题色, 默认值是 #448aff. fixed [可选] 是否开启固定模式, 默认值是 false. mini [可选] 是否开启迷你模式, 默认值是 false. autoplay [可选] 是否自动播放音乐, 默认值是 false. volume [可选] 第一次打开播放器时的默认音量, 会被保存在浏览器缓存中, 默认值是 0.7. mutex [可选] 是否自动暂停其它播放器, 默认值是 true. music shortcode 还有一些只适用于音乐列表方式的其它命名参数: loop [可选] [all, one, none] 音乐列表的循环模式, 默认值是 none. order [可选] [list, random] 音乐列表的播放顺序, 默认值是 list. list-folded [可选] 初次打开的时候音乐列表是否折叠, 默认值是 false. list-max-height [可选] 音乐列表的最大高度, 默认值是 340px. ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:8:4","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"9 bilibili bilibili shortcode 提供了一个内嵌的用来播放 bilibili 视频的响应式播放器. 如果视频只有一个部分, 则仅需要视频的 BV id, 例如: https://www.bilibili.com/video/BV1Sx411T7QQ 一个 bilibili 示例: {{\u003c bilibili BV1Sx411T7QQ \u003e}} 或者 {{\u003c bilibili id=BV1Sx411T7QQ \u003e}} 呈现的输出效果如下: 如果视频包含多个部分, 则除了视频的 BV id 之外, 还需要 p, 默认值为 1, 例如: https://www.bilibili.com/video/BV1TJ411C7An?p=3 一个带有 p 参数的 bilibili 示例: {{\u003c bilibili BV1TJ411C7An 3 \u003e}} 或者 {{\u003c bilibili id=BV1TJ411C7An p=3 \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:9:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10 typeit typeit shortcode 基于 TypeIt 提供了打字动画. 只需将你需要打字动画的内容插入 typeit shortcode 中即可. ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:10:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.1 简单内容 允许使用 Markdown 格式的简单内容, 并且 不包含 富文本的块内容, 例如图像等等… 一个 typeit 示例: {{\u003c typeit \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: 另外, 你也可以自定义 HTML 标签. 一个带有 h4 标签的 typeit 示例: {{\u003c typeit tag=h4 \u003e}} 这一个带有基于 [TypeIt](https://typeitjs.com/) 的 **打字动画** 的 *段落*... {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:10:1","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.2 代码内容 代码内容也是允许的, 并且通过使用参数 code 指定语言类型可以实习语法高亮. 一个带有 code 参数的 typeit 示例: {{\u003c typeit code=java \u003e}} public class HelloWorld { public static void main(String []args) { System.out.println(\"Hello World\"); } } {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:10:2","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"10.3 分组内容 默认情况下, 所有打字动画都是同时开始的. 但是有时你可能需要按顺序开始一组 typeit 内容的打字动画. 一组具有相同 group 参数值的 typeit 内容将按顺序开始打字动画. 一个带有 group 参数的 typeit 示例: {{\u003c typeit group=paragraph \u003e}} **首先**, 这个段落开始 {{\u003c /typeit \u003e}} {{\u003c typeit group=paragraph \u003e}} **然后**, 这个段落开始 {{\u003c /typeit \u003e}} 呈现的输出效果如下: ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:10:3","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["documentation"],"content":"11 script script shortcode 用来在你的文章中插入  Javascript 脚本. 注意 脚本内容可以保证在所有的第三方库加载之后按顺序执行. 所以你可以自由地使用第三方库. 一个 script 示例: {{\u003c script \u003e}} console.log('Hello LoveIt!'); {{\u003c /script \u003e}} 你可以在开发者工具的控制台中看到输出. ","date":"2020-03-03","objectID":"/docs/theme-documentation/theme-documentation-extended-shortcodes/:11:0","tags":["shortcodes"],"title":"主题文档 - 扩展 Shortcodes","uri":"/docs/theme-documentation/theme-documentation-extended-shortcodes/"},{"categories":["Python"],"content":"青少年普法网每年的题还都不一样，真麻烦。每年都要重新写的么？ 使用方法： 用Excle保存三列数据。然后另存为\"321.csv\" 用户名1,姓名1,密码1\r用户名2,姓名2,密码2\r用户名3,姓名3,密码3\r…… 然后就启动脚本。 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Date : 2024-9-30 21:03:11 # @Author : Xzap (xzap@163.com) # @Link : https://xzap.github.io # @Version : 3.0 from playwright.sync_api import Playwright, sync_playwright, expect import time import requests import ddddocr import random import csv ocr = ddddocr.DdddOcr(show_ad = False) def shuashua(uid, name, passwd): taskid = 25 passwd_all = \"242465\" page = context.new_page() page.goto(\"https://static.qspfw.moe.gov.cn/user/#/user/login\") time.sleep(1) page.get_by_text(\"学校统一学习入口\").click() page.get_by_placeholder(\"请输入学校统一学习码\").fill(passwd_all) page.get_by_placeholder(\"请输入学习账号\").fill(uid) page.get_by_placeholder(\"请输入姓名\").fill(name) page.get_by_label(\"我已阅读并同意\").check() page.get_by_role(\"img\", name=\"换一张\").screenshot(animations=\"disabled\" , path=\"pw_cap.png\") with open(\"pw_cap.png\",\"rb\") as f: image = f.read() ocr.set_ranges(\"0123456789abcdefghijklmnopqrstuvwxyz\") result = ocr.classification(image, probability=True) # print(result) res = \"\" for j in result['probability']: res += result['charsets'][j.index(max(j))] # print (res) if len(res) == 6 : res = res[1:] print(f\"验证码: {res}\") page.get_by_placeholder(\"请输入验证码\").fill(res) page.get_by_role(\"button\", name=\"登 录\").click() time.sleep(1) ck = page.context.cookies() s = requests.session() headers = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36\", \"source\": \"1\",} s.headers.update(headers) for cookie in ck: s.cookies.set(cookie['name'],cookie['value']) s.headers[\"Access-Token\"] = s.cookies['SESSION'] c = s.get(\"https://api.qspfw.moe.gov.cn/examApi/practice/getUserProcess?taskId=25\") process = c.json()['data']['process'] grade = c.json()['data'][\"gradeName\"] print(grade) if process == \"100%\": print (\"已完成\") else : c = s.get(f\"https://api.qspfw.moe.gov.cn/examApi/practice/getColumnList?taskId={taskid}\") cids = c.json()[\"data\"][\"columnList\"] for cl in cids: cid = cl[\"columnId\"] print(cl[\"name\"]) c = s.get(f\"https://api.qspfw.moe.gov.cn/examApi/paper/getExamInfo?taskId={taskid}\") c = s.get(f\"https://api.qspfw.moe.gov.cn/punchApi/punch/activity/selectActivityByUser?taskId={taskid}\") c = s.get(f\"https://api.qspfw.moe.gov.cn/examApi/practice/studyByChapterId?columnId={cid}\u0026taskId={taskid}\") c = s.get(f\"https://api.qspfw.moe.gov.cn/examApi/practice/getColumnList?taskId={taskid}\") c = s.get(f\"https://api.qspfw.moe.gov.cn/examApi/practice/studyByColumnId?columnId={cid}\u0026taskId={taskid}\") c = s.get(f\"https://api.qspfw.moe.gov.cn/examApi/study/practice?columnId={cid}\u0026taskId={taskid}\u0026takeTime={random.randint(60,180)}\") if grade == \"三年级\" or grade == \"四年级\" or grade == \"五年级\" or grade == \"六年级\" : c = s.get(f\"https://api.qspfw.moe.gov.cn/examApi/practice/practice?columnId={cid}\u0026taskId={taskid}\") tiku = c.json()[\"data\"][\"questionBankList\"] aa = {} for i in tiku: aa[i[\"answerOptions\"]] = i[\"answer\"] c = s.get(f\"https://api.qspfw.moe.gov.cn/examApi/paper/getPaper?taskId={taskid}\") tiku2 = c.json()[\"data\"][\"paper\"][\"paperInfo\"] pid = c.json()[\"data\"][\"paper\"][\"id\"] rid = c.json()[\"data\"][\"resultId\"] answer = \"\" for j in tiku2: answer += f'{j[\"id\"]}_{aa[j[\"answerOptions\"]]}@!@' # print (f\"https://api.qspfw.moe.gov.cn/examApi/paper/saveResult?taskId={taskid}\u0026paperId={pid}\u0026resultId={rid}\u0026answers={answer}\u0026takeTime={random.randint(100,280)}\") c = s.get(f\"https://api.qspfw.moe.gov.cn/examApi/paper/saveResult?taskId={taskid}\u0026paperId={pid}\u0026resultId={rid}\u0026answers={answer}\u0026takeTime={random.randint(100,280)}\") # print (c.json()) c = s.get(\"https://api.qspfw.moe.gov.cn/examApi/practice/getUserProcess?taskId=25\") print(c.json()['data']['process']) c = s.get(\"https://api.qspfw.moe.gov.cn/userAuthApi/user/logout\") print (c.json()[\"data\"]) # page.goto(\"https://static.qspfw.moe.gov.cn/user/#/user/login\") # time.sleep(1) page.close() with sync_playwright() as playwright: # 'chromium' Or 'f","date":"2024-10-01","objectID":"/posts/qsnpfw2024/:0:0","tags":["Python","ddddocr","Playwright"],"title":"2024年的青少年普法网","uri":"/posts/qsnpfw2024/"},{"categories":["Software"],"content":"破解Sublime Text的方法，记录下以备不时之需。 首先是需要个hex编辑器。偷懒点用 在线的编辑器 找到主程序文件sublime_text 用hex编辑器 搜索 807805000f94c1替换为 c64005014885c9 Done 当然最简单的方法是: sudo sed -i 's/\\x80\\x78\\x05\\x00\\x0f\\x94\\xc1/\\xc6\\x40\\x05\\x01\\x48\\x85\\xc9/g' /opt/sublime_text/sublime_text 一条命令搞定。 ","date":"2024-04-14","objectID":"/posts/crack_sublime/:0:0","tags":["Sublime","Software"],"title":"破解Sublime Text这个软件","uri":"/posts/crack_sublime/"},{"categories":["Python"],"content":"又是让学生学禁毒。城里学校都是发给家长让家长做。我们学校就安排给电脑老师。没辙，就带学生在信息课上做呗。但总有漏网之鱼，只好写个脚本来完善一下。人不多那就随便写写算了，能跑就行。 先是用 python -m playwright codegen -o out.py --target python -b ff 用PlayWright自带录制工具。录制一遍登录。然后再用开发者工具直接把提交考试的那个post信息找出来，合在一起就完成了。 中间还是好多坑： 首先用 chromium 接口死活登录不上，最后用了 firefox 才顺利登录。 登录的时候有个阿里云的无验证码验证，也就是滑条。一开始还不出现。10几个人后就开始出现了。然后很简单几行代码找到坐标，滑动一下就可以了。10几个人后阿里云的ai可能发现滑动太平滑了，又要点击验证。只好再制作个滑动路径，使得每次的滑动路径都不一样。总算跑完了那100多人。速度就奇慢了，完成就好。懒得优化了。反正我完成了，哈哈。 上次写那个青少年普法做了件脱裤子放屁的事情。还把cookie转到requests里再进行刷。其实完全可以直接用 page.request.post() 就好了。真是多此一举。 找一个文本文件放入用户名姓名和密码，注意要另存为utf-8编码格式。保存为 s.csv 放在同目录下。 用户名1,密码1\r用户名2,密码2\r用户名3,密码3\r…… 直接上代码： #!/usr/bin/env python # -*- coding: utf-8 -*- # @Date : 2023-11-15 19:18:10 # @Author : Xzap (xzap@163.com) # @Link : https://xzap.gitee.io # @Version : $Id$ from playwright.sync_api import Playwright, sync_playwright, expect import time import re import random with open(\"s.csv\",\"r\", encoding=\"utf-8\") as f: s1 = f.read().split(\"\\n\") s = [i.split(\",\") for i in s1] def make_tracks(num): num2 = num + random.randint(-10,10) a = random.randint(5,10) a2 = num2 // a a3 = [] for i in range(a): a3.append(random.randint(a2-30,a2+30)) cha = num2 - sum(a3) a3[-1] = a3[-1] + cha return a3 def cancel_request(route,request): route.abort() def login(context, user, passwd): page = context.new_page() page.route(re.compile(r\"(\\.png)|(\\.jpg)\"),cancel_request) # 不加载图片 page.goto(\"https://www.2-class.com/\") rt = re.search('reqtoken:\"(.*?)\"', page.content()).group(1) # print (rt) page.get_by_role(\"button\", name=\"登 录\").click() page.get_by_placeholder(\"请输入登录账号\").click() page.get_by_placeholder(\"请输入登录账号\").fill(user) page.get_by_placeholder(\"请输入密码\").click() page.get_by_placeholder(\"请输入密码\").fill(passwd) page.get_by_label(\"自动登录\").check() page.get_by_role(\"button\", name=\"确 定\").click() # page.pause() time.sleep(3) try : cc = page.locator(\"#nc_1_nocaptcha\") if cc.count() \u003e 0: slider = page.locator(\"#nc_1_n1z\").bounding_box() # print(slider) page.mouse.move(x=int(slider['x']), y=slider['y']+slider['height']/2) page.mouse.down() page.wait_for_timeout(100) tracks = make_tracks(400) xc = 0 for track in tracks : xc += track page.mouse.move(x=int(slider['x']) + xc, y=slider['y'] + slider['height'] / 2 + random.randint(-3,3),steps=random.randint(5,10)) page.wait_for_timeout(random.randint(2,6)*10) page.mouse.up() except: print (\"No slider!\") page.get_by_role(\"button\", name=\"我的课程\").click() time.sleep(2) # 五年级第一课 page.goto(\"https://www.2-class.com/courses/1575\") data = {\"courseId\":1575,\"reqtoken\":rt} page.request.post(url=\"https://www.2-class.com/api/course/addCoursePlayPV\",data=data) page.goto(\"https://www.2-class.com/courses/exams/1575\") data = {\"courseId\":\"1575\",\"examCommitReqDataList\":[{\"examId\":1,\"answer\":0},{\"examId\":2,\"answer\":2},{\"examId\":3,\"answer\":2},{\"examId\":4,\"answer\":3},{\"examId\":5,\"answer\":\"0,1,2,3\"}],\"exam\":\"course\",\"reqtoken\":rt} page.request.post(url=\"https://www.2-class.com/api/exam/commit\", data=data) page.goto(\"https://www.2-class.com/drugControlClassroom/courses\") # 五年级第二课 page.goto(\"https://www.2-class.com/courses/1576\") data = {\"courseId\":1576,\"reqtoken\":rt} page.request.post(url=\"https://www.2-class.com/api/course/addCoursePlayPV\",data=data) page.goto(\"https://www.2-class.com/courses/exams/1576\") data = {\"courseId\":\"1576\",\"examCommitReqDataList\":[{\"examId\":1,\"answer\":2},{\"examId\":2,\"answer\":3},{\"examId\":3,\"answer\":1},{\"examId\":4,\"answer\":1},{\"examId\":5,\"answer\":\"0,2\"}],\"exam\":\"course\",\"reqtoken\":rt} page.request.post(url=\"https://www.2-class.com/api/exam/commit\", data=data) page.goto(\"https://www.2-class.com/drugControlClassroom/courses\") # 六年级第一课 # page.goto(\"https://www.2-class.com/courses/1577\") # data = {\"courseId\":1577,\"reqtoken\":rt} # page.request.post(url=\"https://www.2-class.com/api/course/addCoursePlayPV\",data=data) # page.goto(\"https://www.2-class.com/courses/exams/1577\") # data ={\"courseId\":\"1577\",\"examCommitReqDataList\":[{\"examId\":1,\"answer\":3},{\"examId\":2,\"answer\":1},{\"examId\":3,\"answer\":3},{\"examId\":4,\"answer\":0},{\"examId\":5,\"answ","date":"2023-11-15","objectID":"/posts/2class/:0:0","tags":["Python","Playwright"],"title":"青骄第二课堂禁毒知识辅助脚本","uri":"/posts/2class/"},{"categories":["Python"],"content":"写个脚本把电脑上的下载的漫画合成一个Pdf文件方便在手机上看。 直接上脚本，依然不喜欢写注释。哈哈！ #!/usr/bin/env python # -*- coding: utf-8 -*- # @Date : 2023-10-27 21:06:41 # @Author : Xzap (xzap@163.com) # @Link : http://xzap.gitee.io # @Version : $Id$ from reportlab.pdfgen import canvas from PIL import Image from pathlib import Path import uuid class mypdf(object): def __init__(self, path, pdfname): self.path = path self.pdfname = pdfname self.c = canvas.Canvas(self.pdfname) self.c.setPageCompression(0) self.c.setAuthor(\"xzap\") title = str(Path(self.path).stem) print (title) self.c.setTitle(title) self.c.setSubject(title) self.iter_dir() self.save() def one_page(self, image_org): u = str(uuid.uuid4()) image = Image.open(image_org) w, h = image.size self.c.setPageSize(image.size) self.c.bookmarkPage(u) self.c.addOutlineEntry(image_org.name,u, level=1) self.c.drawImage(image_org, 0, 0, w, h) image.close() self.c.showPage() def images_to_pdf(self, path): p2 = Path(path) print (p2.name) u = str(uuid.uuid4()) self.c.bookmarkPage(u) self.c.addOutlineEntry(str(p2.name),u, level=0) images = [f for f in p2.iterdir() if str(f).lower().endswith('.jpg') or str(f).lower().endswith('.png')] images.sort() for i, image_org in enumerate(images): self.one_page(image_org) def iter_dir(self): p = Path(self.path) for i in p.iterdir(): if i.is_dir(): self.images_to_pdf(i) def save(self): self.c.save() def main(): p = Path.cwd() pdf = p / f\"{p.name}.pdf\" mypdf(str(p), str(pdf)) if __name__ == '__main__': main() ","date":"2023-10-28","objectID":"/posts/img2pdf/:0:0","tags":["Python","ReportLab"],"title":"Python脚本将多张图片转成pdf文件","uri":"/posts/img2pdf/"},{"categories":["Python"],"content":"青少年普法网的要求真是麻烦。乡下学校要求家长去做其实还是很有难度的。利用信息课让学生刷教个半节课还有网址都打不开的，完成率很低。那就用Python技术解决吧。 先是打算用Requests库直接登录。这个破网站又是rsa加密，又是后台blob生成二维码。真是有毒。只好用selenium模拟登录，然后获取Cookie。再用requests加载这个Cookie。后面的练习考试就直接用requests来进行。毕竟速度要快很多。用selenium打开界面还要等待加载。后端速度就嗖嗖的了。验证码就靠dddocr这个开源的识别库了。毕竟百度云ocr要收费。识别成功率也就Soso了。 废话不多，直接上使用方法： 找一个文本文件放入用户名姓名和密码，注意要另存为utf-8编码格式。否则默认的ANSI编码那些中文名字读不出来。第150行修改路径。 用户名1,姓名1,密码1\r用户名2,姓名2,密码2\r用户名3,姓名3,密码3\r…… 第28行根据屏幕缩放填入数字，没缩放就填1。屏幕比较大缩放到150就填1.5。 根据开头import里那些库，自己pip安装。这都不会这个脚本不适合你换个会的来。 下载安装好 Firefox 和 geckodriver.exe ，在25行设置好路径。 如果要速度稍微快一点就开启headless模式。22和23行的注释去掉。headless模式屏幕缩放倍率设置为1。 开刷…… #!/usr/bin/env python # -*- coding: utf-8 -*- # @Date : 2023-10-18 23:29:28 # @Author : Xzap (xzap@163.com) # @Link : http://xzap.gitee.io # @Version : 1.3 import os import requests import re from pathlib import Path from seleniumwire import webdriver import time from selenium.webdriver.common.by import By from PIL import Image import ddddocr import random ocr = ddddocr.DdddOcr() # ocr.load_model() options = webdriver.FirefoxOptions() # options.add_argument('-headless') # options.add_argument('--window-size=1600x1200') # driver = webdriver.Firefox() driver = webdriver.Firefox(firefox_binary=\"F:/Mozilla Firefox/firefox.exe\", executable_path=\"F:/Mozilla Firefox/geckodriver.exe\", options=options) def shuashua(uid, name, passwd): beilv = 1.25 taskid = 24 driver.get(\"https://static.qspfw.moe.gov.cn/user/#/user/login\") driver.implicitly_wait(0.5) p_uid = driver.find_element(By.XPATH, '/html/body/div/div/div[2]/div/div[2]/form/div[2]/div/div/span/span/input') p_name = driver.find_element(By.XPATH, '/html/body/div/div/div[2]/div/div[2]/form/div[3]/div/div/span/span/input') p_passwd = driver.find_element(By.XPATH, '/html/body/div/div/div[2]/div/div[2]/form/div[4]/div/div/span/span/input') p_captcha = driver.find_element(By.XPATH, '/html/body/div/div/div[2]/div/div[2]/form/div[5]/div/div/span/span/input') p_img = driver.find_element(By.XPATH, '/html/body/div/div/div[2]/div/div[2]/form/div[5]/div/div/span/img') p_bt = driver.find_element(By.XPATH, '/html/body/div/div/div[2]/div/div[2]/form/div[8]/div/div/span/button') p_check = driver.find_element(By.XPATH, '//*[@id=\"formLogin\"]/div[7]/div/div/span/div/label/span[1]/input') p_check.click() p_captcha.clear() p_uid.clear() p_name.clear() p_passwd.clear() p_uid.send_keys(uid) p_name.send_keys(name) p_passwd.send_keys(passwd) # print (p_img.location) # print (p_img.size) left = p_img.location[ 'x' ] + 25 #x点的坐标 top = p_img.location[ 'y' ] #y点的坐标 right = p_img.size[ 'width' ] + left -25 #上面右边点的坐标 down = p_img.size[ 'height' ] + top #下面右边点的坐标 time.sleep(2) # driver.refresh() # time.sleep(2) driver.get_screenshot_as_file(\"code.png\") image = Image.open ('code.png') # 截取你整个的登录页面 # beilv = 1 code_image = image.crop((left * beilv, top * beilv, right * beilv , down * beilv )) code_image.save('code_new.png') code_image.close() image.close() with open(\"code_new.png\",\"rb\") as f: image = f.read() res = ocr.classification(image) # txts = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' txts = '0123456789abcdefghijklmnopqrstuvwxyz' res2 = \"\" for i in res : if i in txts : res2 += i print(f\"验证码: {res2}\") # print (res2) with open(f\"cap/{res2}.png\", \"wb\") as f: f.write(image) p_captcha.send_keys(res2) p_bt.click() time.sleep(3) ck = driver.get_cookies() s = requests.Session() h1 = {\"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36\", \"source\": \"1\" } s.headers.update(h1) for cookie in ck: s.cookies.set(cookie['name'],cookie['value']) s.headers[\"Access-Token\"] = s.cookies['SESSION'] c = s.get(url=\"https://service-r07xmosl-1251413566.sh.apigw.tencentcs.com/userAuthApi/user/info\") tiku_d = {} s.headers[\"sourceId\"] = \"2\" c = s.get(f\"https://service-6xrqld9h-1251413566.sh.apigw.tencentcs.com/practice/getColumnList?taskId={taskid}\") # print (c.json()) t1 = c.json()['data']['columnList'][0]['columnId'] t2 = c.json()['data']['columnLis","date":"2023-10-21","objectID":"/posts/qsnpfw/:0:0","tags":["Python","ddddocr","Playwright"],"title":"刷青少年普法网的Python脚本","uri":"/posts/qsnpfw/"},{"categories":["Python"],"content":"双减之后每天要作业申报。那就写个脚本每天申报吧。挂在腾讯云函数就简单了。 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Date : 2021-12-08 12:43:55 # @Author : xzap (xzap@163.com) # @Version : 1.0 import hashlib import requests from pprint import pprint import time def daka(userid,passwd): headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36',} req = requests.session() req.headers.update(headers) params = { \"username\" : userid, \"password\" : hashlib.md5(passwd.encode(encoding='UTF-8')).hexdigest(), \"tid\" : 1 } url = \"http://taskwap.zjjxedu.gov.cn/api/third/loginApi\" c = req.get(url,params=params).json() url = \"http://taskwap.zjjxedu.gov.cn/api/teacher/addkhzy\" data = { \"area_id\": c[\"data\"][\"area_id\"], \"category_id\": c[\"data\"][\"category_id\"], \"class_name\": \"四年级(1)班,四年级(2)班\", \"classarr\": \"[3009,3010]\", \"course\": \"数学\", \"grade_id\": \"4\", \"jczynote\": \"口算本一页\", \"kttimes\": 0, \"ktzuoye\": \"\", \"levelnote\": \"\", \"levelzuoye\": \"\", \"pjxs\": \"\", \"school_name\": c[\"data\"][\"sm_name\"], \"sjnote\": \"\", \"sjtimes\": 0, \"sjzuoye\": \"\", \"sm_id\": c[\"data\"][\"sm_id\"], \"smtimes\": 10, \"smzuoye\": \"口算本\", \"so_id\": c[\"data\"][\"so_id\"], # 20260语文 20261数学 20262英语 20263科学 \"subject_id\": \"20261\", \"teacher_name\": c[\"data\"][\"realname\"], \"token\": c[\"data\"][\"token\"], \"zydate\": time.strftime(\"%Y-%m-%d\"), } c = req.post(url,data=data).json() pprint (c) userid = \"手机号\" passwd = \"密码\" daka(userid, passwd) 代码很简单，可惜通用性比较差。作业班级什么的是在网页上选的，所以直接挂机的话，要手动修改班级和作业 再贴一个老婆用的零申报的。可以参考修改。 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Date : 2021-12-08 12:43:55 # @Author : xzap (xzap@163.com) # @Version : 1.0 import hashlib import requests from pprint import pprint import time def daka(userid,passwd): headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36',} req = requests.session() req.headers.update(headers) params = { \"username\" : userid, \"password\" : hashlib.md5(passwd.encode(encoding='UTF-8')).hexdigest(), \"tid\" : 1 } url = \"http://taskwap.zjjxedu.gov.cn/api/third/loginApi\" c = req.get(url,params=params).json() url = \"http://taskwap.zjjxedu.gov.cn/api/teacher/addkhzy\" data = { \"token\": c[\"data\"][\"token\"], \"so_id\": c[\"data\"][\"so_id\"], \"sm_id\": c[\"data\"][\"sm_id\"], \"grade_id\": \"2\", \"classarr\": \"[7695]\", \"subject_id\": \"20260\", \"course\": \"语文\", \"teacher_name\": c[\"data\"][\"sm_name\"], \"class_name\": \"二年级(6)班\", \"school_name\": c[\"data\"][\"sm_name\"], \"area_id\": c[\"data\"][\"area_id\"], \"category_id\": c[\"data\"][\"category_id\"], \"zydate\": time.strftime(\"%Y-%m-%d\"), } c = req.post(url,data=data).json() pprint (c) userid = \"手机号\" passwd = \"密码\" daka(userid, passwd) ","date":"2021-12-08","objectID":"/posts/zuoyeshenbao/:0:0","tags":["Python"],"title":"用Python每天进行作业申报","uri":"/posts/zuoyeshenbao/"},{"categories":["Python"],"content":"之江汇的验证码是很简单的2位数加法。一开始用的是猜答案的办法登录，就是把可能的答案做成一个列表。然后循环登录。直到登录成功。这个效率很低。后来发现它的子网站可以不用验证码登录在用。登录子网站再用token同步登录主网站这个方法用了很长的时间。现在也不能用了。最后是用百度的ocr库AIP很好用。但是现在要收费了。然后就在网上找各种ocr方法。像easyocr和Google的Tesseract-OCR好像都要安装底层软件。好像很麻烦。而且大炮打蚊子。浪费资源，只是0-9的验证码识别。没那个必要了。于是就有了这个用Pil图片处理库直接破解验证码的代码。 ","date":"2021-12-04","objectID":"/posts/yanzhengma/:0:0","tags":["Python","PIL"],"title":"破解之江汇验证码实现自动赚分","uri":"/posts/yanzhengma/"},{"categories":["Python"],"content":"1. 获取验证图片 def get_code(): url = \"http://yun.zjer.cn/index.php?r=portal/Vcode/GetNewCode\" headers = {'Accept': 'application/json, text/javascript, */*; q=0.01', 'Host': 'yun.zjer.cn', 'Origin': 'http://yun.zjer.cn', 'Referer': 'http://yun.zjer.cn/space/index.php?r=portal/user/login', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36', 'X-Requested-With': 'XMLHttpRequest'} r = req.get (url,headers=headers).json() t = r['imageinfo'] v = r['passCode'] return t,v 这个函数获取验证码的图片内容和登录时要用的一个验证字符段。 ","date":"2021-12-04","objectID":"/posts/yanzhengma/:1:0","tags":["Python","PIL"],"title":"破解之江汇验证码实现自动赚分","uri":"/posts/yanzhengma/"},{"categories":["Python"],"content":"2. 解码图片内容 def decode_image(src): result = re.search(\"data:image/(?P\u003cext\u003e.*?);base64,(?P\u003cdata\u003e.*)\", src, re.DOTALL) if result: ext = result.groupdict().get(\"ext\") data = result.groupdict().get(\"data\") else: raise Exception(\"Do not parse!\") img = base64.urlsafe_b64decode(data) return img 这个验证码图片是用base64封装的图片，用base64解码一下就好了 ","date":"2021-12-04","objectID":"/posts/yanzhengma/:2:0","tags":["Python","PIL"],"title":"破解之江汇验证码实现自动赚分","uri":"/posts/yanzhengma/"},{"categories":["Python"],"content":"3. 处理图片并切割 def shibie(src): img_data = decode_image(src) img = Image.open(BytesIO(img_data)) w,h=img.size img=img.convert('RGB') r1,g1,b1 = img.getpixel((0,0)) for i in range(w): for j in range(h): pix2 = img.getpixel((i,j)) if sum(pix2) \u003c 750 : img.putpixel((i,j),(0,0,0)) img1 = img.crop((4,6,14,18)) img2 = img.crop((13,6,23,18)) img3 = img.crop((44,6,54,18)) img4 = img.crop((53,6,63,18)) a = getnum(get_point(img1)) b = getnum(get_point(img2)) c = getnum(get_point(img3)) d = getnum(get_point(img4)) if b == None : num1 = a else : num1 = a*10+b if d == None : num2 = c else : num2 = c*10+d draw_num(img) result = int(num1)+int(num2) return result ","date":"2021-12-04","objectID":"/posts/yanzhengma/:3:0","tags":["Python","PIL"],"title":"破解之江汇验证码实现自动赚分","uri":"/posts/yanzhengma/"},{"categories":["Python"],"content":"3.1 处理图片转成rgb格式。 img=img.convert('RGB') ","date":"2021-12-04","objectID":"/posts/yanzhengma/:3:1","tags":["Python","PIL"],"title":"破解之江汇验证码实现自动赚分","uri":"/posts/yanzhengma/"},{"categories":["Python"],"content":"3.2 遍历图片将不需要的杂点和和背景色全部改成黑色 for i in range(w): for j in range(h): pix2 = img.getpixel((i,j)) if sum(pix2) \u003c 750 : img.putpixel((i,j),(0,0,0)) ","date":"2021-12-04","objectID":"/posts/yanzhengma/:3:2","tags":["Python","PIL"],"title":"破解之江汇验证码实现自动赚分","uri":"/posts/yanzhengma/"},{"categories":["Python"],"content":"3.3 切割图片 img1 = img.crop((4,6,14,18)) img2 = img.crop((13,6,23,18)) img3 = img.crop((44,6,54,18)) img4 = img.crop((53,6,63,18)) ","date":"2021-12-04","objectID":"/posts/yanzhengma/:3:3","tags":["Python","PIL"],"title":"破解之江汇验证码实现自动赚分","uri":"/posts/yanzhengma/"},{"categories":["Python"],"content":"4. 遍历图片找出特征点 def get_point(img): point = \"\" w,h=img.size for i in range(h): p1 = 0 for j in range(w): if img.getpixel((j,i)) == (255,255,255) : p1 += 1 point += str(p1) return point 从上往下遍历图片找出白色像素点形成特征码。因为字形不一样。特征码肯定是唯一的。 ","date":"2021-12-04","objectID":"/posts/yanzhengma/:4:0","tags":["Python","PIL"],"title":"破解之江汇验证码实现自动赚分","uri":"/posts/yanzhengma/"},{"categories":["Python"],"content":"5. 根据特征码找出数字 def getnum(p): num_list = [\"024444444420\",\"023422222260\",\"044422222280\",\"054223222450\",\"023444482220\",\"072255224440\",\"044325544440\",\"082222222220\",\"044444444440\",\"044445523440\",] for num,i in enumerate(num_list): if p == i : return num return None ","date":"2021-12-04","objectID":"/posts/yanzhengma/:5:0","tags":["Python","PIL"],"title":"破解之江汇验证码实现自动赚分","uri":"/posts/yanzhengma/"},{"categories":["Python"],"content":"6. 在终端画出字符画验证识别准备率 def draw_num (img): w,h=img.size for i in range(h): p1 = \"\" for j in range(w): if img.getpixel((j,i)) == (255,255,255) : p1 += \" \" else : p1 += \"1\" print (p1) 准确率还是很高的。基本接近百分之百。 验证码识别成功后一个post就很简单的可以实现自动登录，登录后就可以模仿电脑端操作刷分了。 ","date":"2021-12-04","objectID":"/posts/yanzhengma/:6:0","tags":["Python","PIL"],"title":"破解之江汇验证码实现自动赚分","uri":"/posts/yanzhengma/"},{"categories":["Python"],"content":"完整代码 #!/usr/bin/env python # -*- coding: utf-8 -*- # @Date : 2021-12-02 22:43:55 # @Author : xzap (xzap@163.com) # @Version : 1.1 import retry import time import os import sys import re import requests from PIL import Image import base64 from io import StringIO,BytesIO from retry import retry import time import pickle def get_time(): return int(time.time()*1000) def decodeS(string): string = string.encode() result = base64.b64encode(string).decode() key = \"tPhCyUsKpXlHsEgSyHoEkLdQpLkOsLcYhErFkWxJsFeVhLiQrHqFbYbNyEvClEwUfQmEgUnEfJiHfPtLuEdDbIiIqUqLoTzOmYqA\" key_login = '95a1446a7120e4af5c0c8878abb7e6d2' keyLen = len(key) code = '' for i in range(len(result)): k = i % keyLen n = ord(result[i]) ^ ord(key[k]) code += chr(n) code = base64.b64encode(code.encode()).decode() newcode = \"\" for i in range(len(code)): t1 = code[i] t2 = \"\" if key[i]: t2 = key[i] newcode += t1 + t2 newcode = newcode.replace(\"/\",\"6666cd76f96956469e7be39d750cc7d9\") newcode = newcode.replace(\"=\", \"43ec3e5dee6e706af7766fffea512721\"); newcode = newcode.replace(\"+\", \"26b17225b626fb9238849fd60eabdf60\"); newcode = key_login + newcode return newcode def decode_image(src): result = re.search(\"data:image/(?P\u003cext\u003e.*?);base64,(?P\u003cdata\u003e.*)\", src, re.DOTALL) if result: ext = result.groupdict().get(\"ext\") data = result.groupdict().get(\"data\") else: raise Exception(\"Do not parse!\") img = base64.urlsafe_b64decode(data) return img def get_point(img): point = \"\" w,h=img.size for i in range(h): p1 = 0 for j in range(w): if img.getpixel((j,i)) == (255,255,255) : p1 += 1 point += str(p1) return point def draw_num (img): w,h=img.size for i in range(h): p1 = \"\" for j in range(w): if img.getpixel((j,i)) == (255,255,255) : p1 += \" \" else : p1 += \"1\" print (p1) def getnum(p): num_list = [\"024444444420\",\"023422222260\",\"044422222280\",\"054223222450\",\"023444482220\",\"072255224440\",\"044325544440\",\"082222222220\",\"044444444440\",\"044445523440\",] for num,i in enumerate(num_list): if p == i : return num return None def shibie(src): img_data = decode_image(src) img = Image.open(BytesIO(img_data)) w,h=img.size img=img.convert('RGB') r1,g1,b1 = img.getpixel((0,0)) for i in range(w): for j in range(h): pix2 = img.getpixel((i,j)) if sum(pix2) \u003c 750 : img.putpixel((i,j),(0,0,0)) img1 = img.crop((4,6,14,18)) img2 = img.crop((13,6,23,18)) img3 = img.crop((44,6,54,18)) img4 = img.crop((53,6,63,18)) a = getnum(get_point(img1)) b = getnum(get_point(img2)) c = getnum(get_point(img3)) d = getnum(get_point(img4)) if b == None : num1 = a else : num1 = a*10+b if d == None : num2 = c else : num2 = c*10+d # draw_num(img) result = int(num1)+int(num2) return result def get_code(req): url = \"http://yun.zjer.cn/index.php?r=portal/Vcode/GetNewCode\" headers = {'Accept': 'application/json, text/javascript, */*; q=0.01', 'Host': 'yun.zjer.cn', 'Origin': 'http://yun.zjer.cn', 'Referer': 'http://yun.zjer.cn/space/index.php?r=portal/user/login', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36', 'X-Requested-With': 'XMLHttpRequest'} r = req.get (url,headers=headers).json() t = r['imageinfo'] v = r['passCode'] return t,v # @retry(tries=3, delay=5) def do_login (user,passwd,req,session): user = decodeS(user) passwd = decodeS(passwd) img, vaildata = get_code(req) valcode = shibie(img) url = \"http://yun.zjer.cn/index.php?r=portal/user/loginNew\" data = {\"userId\": user, \"userPsw\": passwd, \"remember\":\"1\", \"vaildata\": vaildata, \"valCode\": valcode, \"service\" : \"\" } j = req.post(url,data=data) # print (j.json()) token = j.json()[\"token\"] url = \"http://yun.zjer.cn/space/index.php?r=uc/site\u0026callback=jQuery015164962438537555_%s\u0026platformCode=%s\u0026school=0\u0026_=%s\" % (get_time(),j.json()[\"platformCode\"],get_time()) c = req.get(url) url_list = [ \"http://space.zjjxedu.gov.cn:10000/index.php\", \"http://yun.zjjxedu.gov.cn/index.php\", \"http://jsjy.space.zjjxedu.gov.cn:10000/index.php\", \"http://jsjy.zjjxedu.gov.cn/index.php\", \"http://yun.zjer.cn/index.php\", \"http://yun.","date":"2021-12-04","objectID":"/posts/yanzhengma/:7:0","tags":["Python","PIL"],"title":"破解之江汇验证码实现自动赚分","uri":"/posts/yanzhengma/"},{"categories":["Powershell"],"content":"Powershell或cmd设置代理 ","date":"2021-03-12","objectID":"/posts/powershell_cmd_proxy/:1:0","tags":["Powershell","proxy"],"title":"Powershell或cmd设置代理","uri":"/posts/powershell_cmd_proxy/"},{"categories":["Powershell"],"content":"设置代理 netsh winhttp set proxy 127.0.0.1:10808 ","date":"2021-03-12","objectID":"/posts/powershell_cmd_proxy/:1:1","tags":["Powershell","proxy"],"title":"Powershell或cmd设置代理","uri":"/posts/powershell_cmd_proxy/"},{"categories":["Powershell"],"content":"取消代理 netsh winhttp reset proxy ","date":"2021-03-12","objectID":"/posts/powershell_cmd_proxy/:1:2","tags":["Powershell","proxy"],"title":"Powershell或cmd设置代理","uri":"/posts/powershell_cmd_proxy/"},{"categories":["Powershell"],"content":"查看代理 netsh winhttp show proxy ","date":"2021-03-12","objectID":"/posts/powershell_cmd_proxy/:1:3","tags":["Powershell","proxy"],"title":"Powershell或cmd设置代理","uri":"/posts/powershell_cmd_proxy/"},{"categories":["Powershell"],"content":"临时设置代理 $Env:http_proxy=\"http://127.0.0.1:10809\";\r$Env:https_proxy=\"http://127.0.0.1:10809\"; ","date":"2021-03-12","objectID":"/posts/powershell_cmd_proxy/:1:4","tags":["Powershell","proxy"],"title":"Powershell或cmd设置代理","uri":"/posts/powershell_cmd_proxy/"},{"categories":["Powershell"],"content":"还是这句比较好用 $PSDefaultParameterValues = @{ \"*:Proxy\"=\"http://127.0.0.1:10809\" } ","date":"2021-03-12","objectID":"/posts/powershell_cmd_proxy/:1:5","tags":["Powershell","proxy"],"title":"Powershell或cmd设置代理","uri":"/posts/powershell_cmd_proxy/"},{"categories":["Powershell"],"content":"Scoop代理 scoop config proxy 'localhost:8080' ","date":"2021-03-12","objectID":"/posts/powershell_cmd_proxy/:1:6","tags":["Powershell","proxy"],"title":"Powershell或cmd设置代理","uri":"/posts/powershell_cmd_proxy/"},{"categories":["Powershell"],"content":"Scoop 移除代理 scoop config rm proxy ","date":"2021-03-12","objectID":"/posts/powershell_cmd_proxy/:1:7","tags":["Powershell","proxy"],"title":"Powershell或cmd设置代理","uri":"/posts/powershell_cmd_proxy/"},{"categories":["wsl2"],"content":"使用了wsl2下载安装了ubuntu，并不是很好用，速度太慢。而且gui使用存在问题。最重要的是安卓虚拟机不能启动。卸载又怕下次要用，于是临时开关下吧。 ","date":"2021-03-07","objectID":"/posts/switch-wsl2/:0:0","tags":["wsl2"],"title":"开关 wsl2","uri":"/posts/switch-wsl2/"},{"categories":["wsl2"],"content":"开关wsl2 ","date":"2021-03-07","objectID":"/posts/switch-wsl2/:1:0","tags":["wsl2"],"title":"开关 wsl2","uri":"/posts/switch-wsl2/"},{"categories":["wsl2"],"content":"关闭 管理员cmd执行： bcdedit /set hypervisorlaunchtype off 并重启 ","date":"2021-03-07","objectID":"/posts/switch-wsl2/:1:1","tags":["wsl2"],"title":"开关 wsl2","uri":"/posts/switch-wsl2/"},{"categories":["wsl2"],"content":"再次打开hyper-v 管理员cmd执行 bcdedit /set hypervisorlaunchtype auto ","date":"2021-03-07","objectID":"/posts/switch-wsl2/:1:2","tags":["wsl2"],"title":"开关 wsl2","uri":"/posts/switch-wsl2/"},{"categories":["Python"],"content":"好不容易放假了，还是要每天一大早健康打卡。对于爱睡懒觉的人来说完全不能忍，于是就考虑着自动健康打卡。用Fiddler Web Debugger 抓包微信的桌面版本。一个登录一个打卡。两个post搞定，还是比较简单的。 微信健康打卡部署 ","date":"2021-02-14","objectID":"/posts/weixindaka/:0:0","tags":["Python","打卡"],"title":"微信里嘉兴健康自动打卡并部署到腾讯云函数","uri":"/posts/weixindaka/"},{"categories":["Python"],"content":"完整代码： #!/usr/bin/env python3 # -*- coding: utf8 -*- import requests userlist = [ (\"手机号或身份证\", \"hy123456\"), (\"手机号或身份证\", \"hy123456\"), (\"手机号或身份证\", \"hy123456\"), ] def daka(user, passwd): req = requests.Session() headers = { \"Host\": \"jk.zjjxedu.gov.cn\", \"Connection\": \"keep-alive\", \"Content-Length\": \"39\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 MicroMessenger/7.0.9.501 NetType/WIFI MiniProgramEnv/Windows WindowsWechat\", \"content-type\": \"application/x-www-form-urlencoded;charset:utf-8\", \"Referer\": \"https:// servicewechat.com/wxbee484c9ef018d43/23/page-frame.html\", \"Accept-Encoding\": \"gzip, deflate, br\", } req.headers.update(headers) url = \"https://jk.zjjxedu.gov.cn/sso/mobi/WxLogin2\" data = { \"loginname\": user, \"password\": passwd, } c = req.post(url, data=data).json() print(c) ticket = c[\"data\"][\"ticket\"] headers = { \"Host\": \"jk.zjjxedu.gov.cn\", \"Connection\": \"keep-alive\", \"Content-Length\": \"80\", \"User-Agent\": \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 MicroMessenger/7.0.9.501 NetType/WIFI MiniProgramEnv/Windows WindowsWechat\", \"content-type\": \"application/x-www-form-urlencoded;charset=utf-8\", \"ticket\": ticket, \"Referer\": \"https://servicewechat.com/wxbee484c9ef018d43/23/page-frame.html\", } req.headers.update(headers) data = { \"temperature\": 36, \"is_whether\": 1, \"amorpm\": 0, \"symptom\": \"\", \"remark\": \"\", \"is_famwhether\": 1, \"famremark\": \"\" } url2 = \"https://jk.zjjxedu.gov.cn/health/mobiapi/savePunchclock\" c = req.post(url2, data=data).json() print(c) def main_handler(event, context): for i in userlist: daka(i[0], i[1]) main_handler(\"\", \"\") ","date":"2021-02-14","objectID":"/posts/weixindaka/:1:0","tags":["Python","打卡"],"title":"微信里嘉兴健康自动打卡并部署到腾讯云函数","uri":"/posts/weixindaka/"},{"categories":["Python"],"content":"修改代码： 修改第6行那里的 (\"手机号或身份证\", \"hy123456\"), 只需要输入手机号或身份证号码就看可以了。如果只有一个人删除7、8行，如果有更多的人就多加几行。 这个代码是用Python写的,所以要注意Python的语法格式，括号前面4个空格不能少，而且是英文的空格和中文的空格不同。结尾是一个英文逗号。 ","date":"2021-02-14","objectID":"/posts/weixindaka/:2:0","tags":["Python","打卡"],"title":"微信里嘉兴健康自动打卡并部署到腾讯云函数","uri":"/posts/weixindaka/"},{"categories":["Python"],"content":"部署到腾讯云函数： ","date":"2021-02-14","objectID":"/posts/weixindaka/:3:0","tags":["Python","打卡"],"title":"微信里嘉兴健康自动打卡并部署到腾讯云函数","uri":"/posts/weixindaka/"},{"categories":["Python"],"content":"1. 打开腾讯云函数： 打开 腾讯云网址 网址是： https://cloud.tencent.com/product/scf 右上角点击登录，用手机微信扫码登录。 ","date":"2021-02-14","objectID":"/posts/weixindaka/:3:1","tags":["Python","打卡"],"title":"微信里嘉兴健康自动打卡并部署到腾讯云函数","uri":"/posts/weixindaka/"},{"categories":["Python"],"content":"2. 进入管理控制台： ","date":"2021-02-14","objectID":"/posts/weixindaka/:3:2","tags":["Python","打卡"],"title":"微信里嘉兴健康自动打卡并部署到腾讯云函数","uri":"/posts/weixindaka/"},{"categories":["Python"],"content":"3. 新建函数： 点击服务 点击新建 点击自定义创建 函数名称随便输入 地域指的是不同地域的服务器。随便选。 这个是运行的程序，因为代码是Python3的。所以必须选 Python3.6。 把原先的实例代码全部删除。复制我的代码粘贴。 点击完成。 ","date":"2021-02-14","objectID":"/posts/weixindaka/:3:3","tags":["Python","打卡"],"title":"微信里嘉兴健康自动打卡并部署到腾讯云函数","uri":"/posts/weixindaka/"},{"categories":["Python"],"content":"4. 设置触发器： 点击触发管理 跳出的界面都不用改 点击触发周期，选自定义触发周期 Cron表达式输入 0 0 7 * * * * 点击提交，完工！ ","date":"2021-02-14","objectID":"/posts/weixindaka/:3:4","tags":["Python","打卡"],"title":"微信里嘉兴健康自动打卡并部署到腾讯云函数","uri":"/posts/weixindaka/"},{"categories":["Python"],"content":"Cron表达式： 第一位 第二位 第三位 第四位 第五位 第六位 第七位 秒 分钟 小时 日 月 星期 年 下面展示了一些 Cron 表达式和相关含义的示例： */5 * * * * * * 表示每5秒触发一次 0 0 2 1 * * * 表示在每月的1日的凌晨2点触发 0 15 10 * * MON-FRI * 表示在周一到周五每天上午10：15触发 0 0 10,14,16 * * * * 表示在每天上午10点，下午2点，4点触发 0 */30 9-17 * * * * 表示在每天上午9点到下午5点内每半小时触发 0 0 12 * * WED * 表示在每个星期三中午12点触发 ","date":"2021-02-14","objectID":"/posts/weixindaka/:3:5","tags":["Python","打卡"],"title":"微信里嘉兴健康自动打卡并部署到腾讯云函数","uri":"/posts/weixindaka/"},{"categories":["Msys2"],"content":"在win系统下使用好点的命令行，虚拟终端用 ConEmu 很好用。至于 Linux 的命令行移植选来选取选了个 Msys2。比Cygwin 轻量得多，而又不像 Gitbash 那样过于简单。特别是还有非常好用的移植自 Archlinux 的 Pacman 的包管理系统。特别是更换了 国内源后速度快了很多。 然后当然是要右键打开才爽的，折腾了好久，才搞出来。首先是注册表： Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\ConEmu Here]\r\"Icon\"=\"F:\\\\ConEmuPack\\\\ConEmu64.exe,0\" [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\ConEmu Here\\command]\r@=\"\\\"F:\\\\ConEmuPack\\\\ConEmu64.exe\\\" \\\"/here\\\" /cmd -cur_console:n {msys2} \" 然后就是在 ConEmu 里增加个名叫 msys2 的 Task。内容如下： set CHERE_INVOKING=1 \u0026e:\\msys64\\usr\\bin\\sh.exe -c \"MSYSTEM=MINGW64 exec /bin/bash --login -i -new_console:C:\"E:\\msys64\\msys2.ico\" 大功告成 ","date":"2015-06-07","objectID":"/posts/conemu_msys/:0:0","tags":["ConEmu","Msys2"],"title":"在Win系统下右键启动ConEmu和Msys2","uri":"/posts/conemu_msys/"},{"categories":["Markdown"],"content":"这个是 Markdown 的一份语法文档，因为老是会忘所以，直接在这里放一份吧。省得老是忘记啊什么的。 NOTE: This is Simplelified Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to Markdown: Syntax . 声明： 这份文档派生(fork)于繁体中文版 ，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里查看它的源文件 。「繁体中文版的原始文件可以查看这里 。」–By @riku 注： 本项目托管于 GitCafe 上，请通过\"派生\"和\"合并请求\"来帮忙改进本项目。 Markdown 语法说明 (简体中文版) / (点击查看快速入门 ) 概述 宗旨 兼容 HTML 特殊字符自动转换 区块元素 段落和换行 标题 区块引用 列表 代码区块 分隔线 区段元素 链接 强调 代码 图片 其它 反斜杠 自动链接 感谢 Markdown 免费编辑器 Markdown 的目标是实现「易读易写」。 可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 [Setext] 1 、[atx] 2 、[Textile] 3 、[reStructuredText] 4 、[Grutatext] 5 和 [EtText] 6 ，而最大灵感来源其实是纯文本电子邮件的格式。 总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。 Markdown 语法的目标是：成为一种适用于网络的书写语言。 Markdown 并不是想取代 HTML的地位，甚至接近它。它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。 要制约的只有一些 HTML 区块元素――比如 \u003cdiv\u003e、\u003ctable\u003e、\u003cpre\u003e、\u003cp\u003e 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 \u003cp\u003e 标签。 例子如下，在 Markdown 文件里加上一段 HTML 表格： 这是一个普通段落。\r\u003ctable\u003e\r\u003ctr\u003e\r\u003ctd\u003eFoo\u003c/td\u003e\r\u003c/tr\u003e\r\u003c/table\u003e\r这是另一个普通段落。\r请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的*强调*会没有效果。 HTML 的区段（行内）标签如 \u003cspan\u003e、\u003ccite\u003e、\u003cdel\u003e 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 \u003ca\u003e 或 \u003cimg\u003e 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。 和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。 在 HTML 文件中，有两个字符需要特殊处理： \u003c 和 \u0026 。 \u003c 符号用于起始标签，\u0026 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 \u0026lt; 和 \u0026amp;。 \u0026 字符尤其让网络文档编写者受折磨，如果你要打「AT\u0026T」 ，你必须要写成「AT\u0026amp;T」。而网址中的 \u0026 字符也要转换。比如你要链接到： http://images.google.com/images?num=30\u0026q=larry+bird\r你必须要把网址转换写为： http://images.google.com/images?num=30\u0026amp;q=larry+bird\r才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。 Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 \u0026 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 \u0026amp;。 所以你如果要在文档中插入一个版权符号 ©，你可以这样写： \u0026copy;\rMarkdown 会保留它不动。而若你写： AT\u0026T\rMarkdown 就会将它转为： AT\u0026amp;T\r类似的状况也会发生在 \u003c 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 \u003c 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写： 4 \u003c 5\rMarkdown 将会把它转换为： 4 \u0026lt; 5\r不过需要注意的是，code 范围内，不论是行内还是区块， \u003c 和 \u0026 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 \u003c 和 \u0026 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。） 一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。 「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 \u003cbr /\u003e 标签。 如果你确实想要依赖 Markdown 来插入 \u003cbr /\u003e 标签的话，在插入处先按入两个以上的空格然后回车。 的确，需要多费点事（多加空格）来产生 \u003cbr /\u003e ，但是简单地「每个换行都转换为 \u003cbr /\u003e」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。 Markdown 支持两种标题的语法，类 [Setext] 1 和类 [atx] 2 形式。 类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： This is an H1\r=============\rThis is an H2\r-------------\r任何数量的 = 和 - 都可以有效果。 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如： # 这是 H1\r## 这是 H2\r###### 这是 H6\r你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）： # 这是 H1 #\r## 这是 H2 ##\r### 这是 H3 ######\rMarkdown 标记区块引用是使用类似 email 中用 \u003e 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 \u003e ： \u003e This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\r\u003e consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\r\u003e Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\r\u003e \u003e Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\r\u003e id sem consectetuer libero luctus adipiscing.\rMarkdown 也允许你偷懒只在整个段落的第一行最前面加上 \u003e ： \u003e This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\rconsectetuer adipiscing e","date":"2015-05-29","objectID":"/docs/markdown/markdown_syntax/:0:0","tags":["Markdown"],"title":"Markdown 语法说明 (简体中文版)","uri":"/docs/markdown/markdown_syntax/"},{"categories":["Markdown"],"content":" Markdown 的一份快速入门文档。此页提供了 Markdown 的简单概念， 语法说明 页提供了完整详细的文档，说明了每项功能。但是 Markdown 其实很简单就可以上手，此页文档提供了一些范例，并且每个范例都会提供输出的 HTML 结果。 声明： 这份文档派生(fork)于繁体中文版 ，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里查看它的源文件 。「繁体中文版的原始文件可以查看这里 」–By @riku 注： 本项目托管于 GitCafe 上，请通过\"派生\"和\"合并请求\"来帮忙改进本项目。 Markdown: Basics （快速入门） / (点击查看完整语法说明 ) ","date":"2015-05-29","objectID":"/docs/markdown/markdown_basics/:0:0","tags":["Markdown"],"title":"Markdown Basics（快速入门）","uri":"/docs/markdown/markdown_basics/"},{"categories":["Markdown"],"content":"Getting the Gist of Markdown’s Formatting Syntax 此页提供了 Markdown 的简单概念， 语法说明 页提供了完整详细的文档，说明了每项功能。但是 Markdown 其实很简单就可以上手，此页文档提供了一些范例，并且每个范例都会提供输出的 HTML 结果。 其实直接试试看也是一个很不错的方法， Dingus 是一个网页应用程序，你可以把自已编写的 Markdown 文档转成 XHTML。 ","date":"2015-05-29","objectID":"/docs/markdown/markdown_basics/:1:0","tags":["Markdown"],"title":"Markdown Basics（快速入门）","uri":"/docs/markdown/markdown_basics/"},{"categories":["Markdown"],"content":"段落、标题、区块代码 一个段落是由一个以上的连接的行句组成，而一个以上的空行则会划分出不同的段落（空行的定义是显示上看起来像是空行，就被视为空行，例如有一行只有空白和 tab，那该行也会被视为空行），一般的段落不需要用空白或换行缩进。 Markdown 支持两种标题的语法，[Setext] 1 和 [atx] 2 形式。Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），Atx 形式在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶。 区块引用则使用 email 形式的 ‘\u003e’ 角括号。 Markdown 语法: A First Level Header ==================== A Second Level Header --------------------- Now is the time for all good men to come to the aid of their country. This is just a regular paragraph. The quick brown fox jumped over the lazy dog's back. ### Header 3 \u003e This is a blockquote. \u003e \u003e This is the second paragraph in the blockquote. \u003e \u003e ## This is an H2 in a blockquote 输出 HTML 为： \u003ch1\u003eA First Level Header\u003c/h1\u003e \u003ch2\u003eA Second Level Header\u003c/h2\u003e \u003cp\u003eNow is the time for all good men to come to the aid of their country. This is just a regular paragraph.\u003c/p\u003e \u003cp\u003eThe quick brown fox jumped over the lazy dog's back.\u003c/p\u003e \u003ch3\u003eHeader 3\u003c/h3\u003e \u003cblockquote\u003e \u003cp\u003eThis is a blockquote.\u003c/p\u003e \u003cp\u003eThis is the second paragraph in the blockquote.\u003c/p\u003e \u003ch2\u003eThis is an H2 in a blockquote\u003c/h2\u003e \u003c/blockquote\u003e ","date":"2015-05-29","objectID":"/docs/markdown/markdown_basics/:2:0","tags":["Markdown"],"title":"Markdown Basics（快速入门）","uri":"/docs/markdown/markdown_basics/"},{"categories":["Markdown"],"content":"修辞和强调 Markdown 使用星号和底线来标记需要强调的区段。 Markdown 语法: Some of these words *are emphasized*. Some of these words _are emphasized also_. Use two asterisks for **strong emphasis**. Or, if you prefer, __use two underscores instead__. 输出 HTML 为: \u003cp\u003eSome of these words \u003cem\u003eare emphasized\u003c/em\u003e. Some of these words \u003cem\u003eare emphasized also\u003c/em\u003e.\u003c/p\u003e \u003cp\u003eUse two asterisks for \u003cstrong\u003estrong emphasis\u003c/strong\u003e. Or, if you prefer, \u003cstrong\u003euse two underscores instead\u003c/strong\u003e.\u003c/p\u003e ","date":"2015-05-29","objectID":"/docs/markdown/markdown_basics/:2:1","tags":["Markdown"],"title":"Markdown Basics（快速入门）","uri":"/docs/markdown/markdown_basics/"},{"categories":["Markdown"],"content":"列表 无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的，使用星号： * Candy. * Gum. * Booze. 加号： + Candy. + Gum. + Booze. 和减号 - Candy. - Gum. - Booze. 都会输出 HTML 为： \u003cul\u003e \u003cli\u003eCandy.\u003c/li\u003e \u003cli\u003eGum.\u003c/li\u003e \u003cli\u003eBooze.\u003c/li\u003e \u003c/ul\u003e 有序的列表则是使用一般的数字接着一个英文句点作为项目标记： 1. Red 2. Green 3. Blue 输出 HTML 为： \u003col\u003e \u003cli\u003eRed\u003c/li\u003e \u003cli\u003eGreen\u003c/li\u003e \u003cli\u003eBlue\u003c/li\u003e \u003c/ol\u003e 如果你在项目之间插入空行，那项目的内容会用 \u003cp\u003e 包起来，你也可以在一个项目内放上多个段落，只要在它前面缩排 4 个空白或 1 个 tab 。 * A list item. With multiple paragraphs. * Another item in the list. 输出 HTML 为： \u003cul\u003e \u003cli\u003e\u003cp\u003eA list item.\u003c/p\u003e \u003cp\u003eWith multiple paragraphs.\u003c/p\u003e\u003c/li\u003e \u003cli\u003e\u003cp\u003eAnother item in the list.\u003c/p\u003e\u003c/li\u003e \u003c/ul\u003e ","date":"2015-05-29","objectID":"/docs/markdown/markdown_basics/:3:0","tags":["Markdown"],"title":"Markdown Basics（快速入门）","uri":"/docs/markdown/markdown_basics/"},{"categories":["Markdown"],"content":"链接 Markdown 支援两种形式的链接语法： 行内 和 参考 两种形式，两种都是使用角括号来把文字转成连结。 行内形式是直接在后面用括号直接接上链接： This is an [example link](http://example.com/). 输出 HTML 为： \u003cp\u003eThis is an \u003ca href=\"http://example.com/\"\u003e example link\u003c/a\u003e.\u003c/p\u003e 你也可以选择性的加上 title 属性： This is an [example link](http://example.com/ \"With a Title\"). 输出 HTML 为： \u003cp\u003eThis is an \u003ca href=\"http://example.com/\" title=\"With a Title\"\u003e example link\u003c/a\u003e.\u003c/p\u003e 参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容： I get 10 times more traffic from [Google][1] than from [Yahoo][2] or [MSN][3]. [1]: http://google.com/ \"Google\" [2]: http://search.yahoo.com/ \"Yahoo Search\" [3]: http://search.msn.com/ \"MSN Search\" 输出 HTML 为： \u003cp\u003eI get 10 times more traffic from \u003ca href=\"http://google.com/\" title=\"Google\"\u003eGoogle\u003c/a\u003e than from \u003ca href=\"http://search.yahoo.com/\" title=\"Yahoo Search\"\u003eYahoo\u003c/a\u003e or \u003ca href=\"http://search.msn.com/\" title=\"MSN Search\"\u003eMSN\u003c/a\u003e.\u003c/p\u003e title 属性是选择性的，链接名称可以用字母、数字和空格，但是不分大小写： I start my morning with a cup of coffee and [The New York Times][NY Times]. [ny times]: http://www.nytimes.com/ 输出 HTML 为： \u003cp\u003eI start my morning with a cup of coffee and \u003ca href=\"http://www.nytimes.com/\"\u003eThe New York Times\u003c/a\u003e.\u003c/p\u003e ","date":"2015-05-29","objectID":"/docs/markdown/markdown_basics/:3:1","tags":["Markdown"],"title":"Markdown Basics（快速入门）","uri":"/docs/markdown/markdown_basics/"},{"categories":["Markdown"],"content":"图片 图片的语法和链接很像。 行内形式（title 是选择性的）： ![alt text](/path/to/img.jpg \"Title\") 参考形式： ![alt text][id] [id]: /path/to/img.jpg \"Title\" 上面两种方法都会输出 HTML 为： \u003cimg src=\"/path/to/img.jpg\" alt=\"alt text\" title=\"Title\" /\u003e ","date":"2015-05-29","objectID":"/docs/markdown/markdown_basics/:3:2","tags":["Markdown"],"title":"Markdown Basics（快速入门）","uri":"/docs/markdown/markdown_basics/"},{"categories":["Markdown"],"content":"代码 在一般的段落文字中，你可以使用反引号 ` 来标记代码区段，区段内的 \u0026、\u003c 和 \u003e 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码： I strongly recommend against using any `\u003cblink\u003e` tags. I wish SmartyPants used named entities like `\u0026mdash;` instead of decimal-encoded entites like `\u0026#8212;`. 输出 HTML 为： \u003cp\u003eI strongly recommend against using any \u003ccode\u003e\u0026lt;blink\u0026gt;\u003c/code\u003e tags.\u003c/p\u003e \u003cp\u003eI wish SmartyPants used named entities like \u003ccode\u003e\u0026amp;mdash;\u003c/code\u003e instead of decimal-encoded entites like \u003ccode\u003e\u0026amp;#8212;\u003c/code\u003e.\u003c/p\u003e 如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 \u0026、\u003c 和 \u003e 也一样会自动转成 HTML 实体。 Markdown 语法: If you want your page to validate under XHTML 1.0 Strict, you've got to put paragraph tags in your blockquotes: \u003cblockquote\u003e \u003cp\u003eFor example.\u003c/p\u003e \u003c/blockquote\u003e 输出 HTML 为： \u003cp\u003eIf you want your page to validate under XHTML 1.0 Strict, you've got to put paragraph tags in your blockquotes:\u003c/p\u003e \u003cpre\u003e\u003ccode\u003e\u0026lt;blockquote\u0026gt; \u0026lt;p\u0026gt;For example.\u0026lt;/p\u0026gt; \u0026lt;/blockquote\u0026gt; \u003c/code\u003e\u003c/pre\u003e ","date":"2015-05-29","objectID":"/docs/markdown/markdown_basics/:3:3","tags":["Markdown"],"title":"Markdown Basics（快速入门）","uri":"/docs/markdown/markdown_basics/"}]